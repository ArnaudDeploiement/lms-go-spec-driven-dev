// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-go/internal/ent/content"
	"lms-go/internal/ent/organization"
	"lms-go/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ContentUpdate is the builder for updating Content entities.
type ContentUpdate struct {
	config
	hooks    []Hook
	mutation *ContentMutation
}

// Where appends a list predicates to the ContentUpdate builder.
func (cu *ContentUpdate) Where(ps ...predicate.Content) *ContentUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetOrganizationID sets the "organization_id" field.
func (cu *ContentUpdate) SetOrganizationID(u uuid.UUID) *ContentUpdate {
	cu.mutation.SetOrganizationID(u)
	return cu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableOrganizationID(u *uuid.UUID) *ContentUpdate {
	if u != nil {
		cu.SetOrganizationID(*u)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *ContentUpdate) SetName(s string) *ContentUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableName(s *string) *ContentUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetMimeType sets the "mime_type" field.
func (cu *ContentUpdate) SetMimeType(s string) *ContentUpdate {
	cu.mutation.SetMimeType(s)
	return cu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableMimeType(s *string) *ContentUpdate {
	if s != nil {
		cu.SetMimeType(*s)
	}
	return cu
}

// SetSizeBytes sets the "size_bytes" field.
func (cu *ContentUpdate) SetSizeBytes(i int64) *ContentUpdate {
	cu.mutation.ResetSizeBytes()
	cu.mutation.SetSizeBytes(i)
	return cu
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableSizeBytes(i *int64) *ContentUpdate {
	if i != nil {
		cu.SetSizeBytes(*i)
	}
	return cu
}

// AddSizeBytes adds i to the "size_bytes" field.
func (cu *ContentUpdate) AddSizeBytes(i int64) *ContentUpdate {
	cu.mutation.AddSizeBytes(i)
	return cu
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (cu *ContentUpdate) ClearSizeBytes() *ContentUpdate {
	cu.mutation.ClearSizeBytes()
	return cu
}

// SetStorageKey sets the "storage_key" field.
func (cu *ContentUpdate) SetStorageKey(s string) *ContentUpdate {
	cu.mutation.SetStorageKey(s)
	return cu
}

// SetNillableStorageKey sets the "storage_key" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableStorageKey(s *string) *ContentUpdate {
	if s != nil {
		cu.SetStorageKey(*s)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *ContentUpdate) SetStatus(s string) *ContentUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *ContentUpdate) SetNillableStatus(s *string) *ContentUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetMetadata sets the "metadata" field.
func (cu *ContentUpdate) SetMetadata(m map[string]interface{}) *ContentUpdate {
	cu.mutation.SetMetadata(m)
	return cu
}

// ClearMetadata clears the value of the "metadata" field.
func (cu *ContentUpdate) ClearMetadata() *ContentUpdate {
	cu.mutation.ClearMetadata()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContentUpdate) SetUpdatedAt(t time.Time) *ContentUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cu *ContentUpdate) SetOrganization(o *Organization) *ContentUpdate {
	return cu.SetOrganizationID(o.ID)
}

// Mutation returns the ContentMutation object of the builder.
func (cu *ContentUpdate) Mutation() *ContentMutation {
	return cu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (cu *ContentUpdate) ClearOrganization() *ContentUpdate {
	cu.mutation.ClearOrganization()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContentUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContentUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContentUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContentUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContentUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := content.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ContentUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := content.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Content.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.MimeType(); ok {
		if err := content.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "Content.mime_type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.StorageKey(); ok {
		if err := content.StorageKeyValidator(v); err != nil {
			return &ValidationError{Name: "storage_key", err: fmt.Errorf(`ent: validator failed for field "Content.storage_key": %w`, err)}
		}
	}
	if _, ok := cu.mutation.OrganizationID(); cu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Content.organization"`)
	}
	return nil
}

func (cu *ContentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(content.Table, content.Columns, sqlgraph.NewFieldSpec(content.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(content.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.MimeType(); ok {
		_spec.SetField(content.FieldMimeType, field.TypeString, value)
	}
	if value, ok := cu.mutation.SizeBytes(); ok {
		_spec.SetField(content.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedSizeBytes(); ok {
		_spec.AddField(content.FieldSizeBytes, field.TypeInt64, value)
	}
	if cu.mutation.SizeBytesCleared() {
		_spec.ClearField(content.FieldSizeBytes, field.TypeInt64)
	}
	if value, ok := cu.mutation.StorageKey(); ok {
		_spec.SetField(content.FieldStorageKey, field.TypeString, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(content.FieldStatus, field.TypeString, value)
	}
	if value, ok := cu.mutation.Metadata(); ok {
		_spec.SetField(content.FieldMetadata, field.TypeJSON, value)
	}
	if cu.mutation.MetadataCleared() {
		_spec.ClearField(content.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(content.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   content.OrganizationTable,
			Columns: []string{content.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   content.OrganizationTable,
			Columns: []string{content.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{content.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContentUpdateOne is the builder for updating a single Content entity.
type ContentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContentMutation
}

// SetOrganizationID sets the "organization_id" field.
func (cuo *ContentUpdateOne) SetOrganizationID(u uuid.UUID) *ContentUpdateOne {
	cuo.mutation.SetOrganizationID(u)
	return cuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *ContentUpdateOne {
	if u != nil {
		cuo.SetOrganizationID(*u)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *ContentUpdateOne) SetName(s string) *ContentUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableName(s *string) *ContentUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetMimeType sets the "mime_type" field.
func (cuo *ContentUpdateOne) SetMimeType(s string) *ContentUpdateOne {
	cuo.mutation.SetMimeType(s)
	return cuo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableMimeType(s *string) *ContentUpdateOne {
	if s != nil {
		cuo.SetMimeType(*s)
	}
	return cuo
}

// SetSizeBytes sets the "size_bytes" field.
func (cuo *ContentUpdateOne) SetSizeBytes(i int64) *ContentUpdateOne {
	cuo.mutation.ResetSizeBytes()
	cuo.mutation.SetSizeBytes(i)
	return cuo
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableSizeBytes(i *int64) *ContentUpdateOne {
	if i != nil {
		cuo.SetSizeBytes(*i)
	}
	return cuo
}

// AddSizeBytes adds i to the "size_bytes" field.
func (cuo *ContentUpdateOne) AddSizeBytes(i int64) *ContentUpdateOne {
	cuo.mutation.AddSizeBytes(i)
	return cuo
}

// ClearSizeBytes clears the value of the "size_bytes" field.
func (cuo *ContentUpdateOne) ClearSizeBytes() *ContentUpdateOne {
	cuo.mutation.ClearSizeBytes()
	return cuo
}

// SetStorageKey sets the "storage_key" field.
func (cuo *ContentUpdateOne) SetStorageKey(s string) *ContentUpdateOne {
	cuo.mutation.SetStorageKey(s)
	return cuo
}

// SetNillableStorageKey sets the "storage_key" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableStorageKey(s *string) *ContentUpdateOne {
	if s != nil {
		cuo.SetStorageKey(*s)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ContentUpdateOne) SetStatus(s string) *ContentUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *ContentUpdateOne) SetNillableStatus(s *string) *ContentUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetMetadata sets the "metadata" field.
func (cuo *ContentUpdateOne) SetMetadata(m map[string]interface{}) *ContentUpdateOne {
	cuo.mutation.SetMetadata(m)
	return cuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cuo *ContentUpdateOne) ClearMetadata() *ContentUpdateOne {
	cuo.mutation.ClearMetadata()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContentUpdateOne) SetUpdatedAt(t time.Time) *ContentUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cuo *ContentUpdateOne) SetOrganization(o *Organization) *ContentUpdateOne {
	return cuo.SetOrganizationID(o.ID)
}

// Mutation returns the ContentMutation object of the builder.
func (cuo *ContentUpdateOne) Mutation() *ContentMutation {
	return cuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (cuo *ContentUpdateOne) ClearOrganization() *ContentUpdateOne {
	cuo.mutation.ClearOrganization()
	return cuo
}

// Where appends a list predicates to the ContentUpdate builder.
func (cuo *ContentUpdateOne) Where(ps ...predicate.Content) *ContentUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContentUpdateOne) Select(field string, fields ...string) *ContentUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Content entity.
func (cuo *ContentUpdateOne) Save(ctx context.Context) (*Content, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContentUpdateOne) SaveX(ctx context.Context) *Content {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContentUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContentUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContentUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := content.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ContentUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := content.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Content.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.MimeType(); ok {
		if err := content.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "Content.mime_type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.StorageKey(); ok {
		if err := content.StorageKeyValidator(v); err != nil {
			return &ValidationError{Name: "storage_key", err: fmt.Errorf(`ent: validator failed for field "Content.storage_key": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.OrganizationID(); cuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Content.organization"`)
	}
	return nil
}

func (cuo *ContentUpdateOne) sqlSave(ctx context.Context) (_node *Content, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(content.Table, content.Columns, sqlgraph.NewFieldSpec(content.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Content.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, content.FieldID)
		for _, f := range fields {
			if !content.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != content.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(content.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.MimeType(); ok {
		_spec.SetField(content.FieldMimeType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SizeBytes(); ok {
		_spec.SetField(content.FieldSizeBytes, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedSizeBytes(); ok {
		_spec.AddField(content.FieldSizeBytes, field.TypeInt64, value)
	}
	if cuo.mutation.SizeBytesCleared() {
		_spec.ClearField(content.FieldSizeBytes, field.TypeInt64)
	}
	if value, ok := cuo.mutation.StorageKey(); ok {
		_spec.SetField(content.FieldStorageKey, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(content.FieldStatus, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Metadata(); ok {
		_spec.SetField(content.FieldMetadata, field.TypeJSON, value)
	}
	if cuo.mutation.MetadataCleared() {
		_spec.ClearField(content.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(content.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   content.OrganizationTable,
			Columns: []string{content.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   content.OrganizationTable,
			Columns: []string{content.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Content{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{content.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
