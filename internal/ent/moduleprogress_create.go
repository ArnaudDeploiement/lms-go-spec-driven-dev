// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-go/internal/ent/enrollment"
	"lms-go/internal/ent/module"
	"lms-go/internal/ent/moduleprogress"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ModuleProgressCreate is the builder for creating a ModuleProgress entity.
type ModuleProgressCreate struct {
	config
	mutation *ModuleProgressMutation
	hooks    []Hook
}

// SetEnrollmentID sets the "enrollment_id" field.
func (mpc *ModuleProgressCreate) SetEnrollmentID(u uuid.UUID) *ModuleProgressCreate {
	mpc.mutation.SetEnrollmentID(u)
	return mpc
}

// SetModuleID sets the "module_id" field.
func (mpc *ModuleProgressCreate) SetModuleID(u uuid.UUID) *ModuleProgressCreate {
	mpc.mutation.SetModuleID(u)
	return mpc
}

// SetStatus sets the "status" field.
func (mpc *ModuleProgressCreate) SetStatus(s string) *ModuleProgressCreate {
	mpc.mutation.SetStatus(s)
	return mpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpc *ModuleProgressCreate) SetNillableStatus(s *string) *ModuleProgressCreate {
	if s != nil {
		mpc.SetStatus(*s)
	}
	return mpc
}

// SetScore sets the "score" field.
func (mpc *ModuleProgressCreate) SetScore(f float32) *ModuleProgressCreate {
	mpc.mutation.SetScore(f)
	return mpc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (mpc *ModuleProgressCreate) SetNillableScore(f *float32) *ModuleProgressCreate {
	if f != nil {
		mpc.SetScore(*f)
	}
	return mpc
}

// SetAttempts sets the "attempts" field.
func (mpc *ModuleProgressCreate) SetAttempts(i int) *ModuleProgressCreate {
	mpc.mutation.SetAttempts(i)
	return mpc
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (mpc *ModuleProgressCreate) SetNillableAttempts(i *int) *ModuleProgressCreate {
	if i != nil {
		mpc.SetAttempts(*i)
	}
	return mpc
}

// SetStartedAt sets the "started_at" field.
func (mpc *ModuleProgressCreate) SetStartedAt(t time.Time) *ModuleProgressCreate {
	mpc.mutation.SetStartedAt(t)
	return mpc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mpc *ModuleProgressCreate) SetNillableStartedAt(t *time.Time) *ModuleProgressCreate {
	if t != nil {
		mpc.SetStartedAt(*t)
	}
	return mpc
}

// SetCompletedAt sets the "completed_at" field.
func (mpc *ModuleProgressCreate) SetCompletedAt(t time.Time) *ModuleProgressCreate {
	mpc.mutation.SetCompletedAt(t)
	return mpc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (mpc *ModuleProgressCreate) SetNillableCompletedAt(t *time.Time) *ModuleProgressCreate {
	if t != nil {
		mpc.SetCompletedAt(*t)
	}
	return mpc
}

// SetCreatedAt sets the "created_at" field.
func (mpc *ModuleProgressCreate) SetCreatedAt(t time.Time) *ModuleProgressCreate {
	mpc.mutation.SetCreatedAt(t)
	return mpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mpc *ModuleProgressCreate) SetNillableCreatedAt(t *time.Time) *ModuleProgressCreate {
	if t != nil {
		mpc.SetCreatedAt(*t)
	}
	return mpc
}

// SetUpdatedAt sets the "updated_at" field.
func (mpc *ModuleProgressCreate) SetUpdatedAt(t time.Time) *ModuleProgressCreate {
	mpc.mutation.SetUpdatedAt(t)
	return mpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mpc *ModuleProgressCreate) SetNillableUpdatedAt(t *time.Time) *ModuleProgressCreate {
	if t != nil {
		mpc.SetUpdatedAt(*t)
	}
	return mpc
}

// SetID sets the "id" field.
func (mpc *ModuleProgressCreate) SetID(u uuid.UUID) *ModuleProgressCreate {
	mpc.mutation.SetID(u)
	return mpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mpc *ModuleProgressCreate) SetNillableID(u *uuid.UUID) *ModuleProgressCreate {
	if u != nil {
		mpc.SetID(*u)
	}
	return mpc
}

// SetEnrollment sets the "enrollment" edge to the Enrollment entity.
func (mpc *ModuleProgressCreate) SetEnrollment(e *Enrollment) *ModuleProgressCreate {
	return mpc.SetEnrollmentID(e.ID)
}

// SetModule sets the "module" edge to the Module entity.
func (mpc *ModuleProgressCreate) SetModule(m *Module) *ModuleProgressCreate {
	return mpc.SetModuleID(m.ID)
}

// Mutation returns the ModuleProgressMutation object of the builder.
func (mpc *ModuleProgressCreate) Mutation() *ModuleProgressMutation {
	return mpc.mutation
}

// Save creates the ModuleProgress in the database.
func (mpc *ModuleProgressCreate) Save(ctx context.Context) (*ModuleProgress, error) {
	mpc.defaults()
	return withHooks(ctx, mpc.sqlSave, mpc.mutation, mpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *ModuleProgressCreate) SaveX(ctx context.Context) *ModuleProgress {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *ModuleProgressCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *ModuleProgressCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpc *ModuleProgressCreate) defaults() {
	if _, ok := mpc.mutation.Status(); !ok {
		v := moduleprogress.DefaultStatus
		mpc.mutation.SetStatus(v)
	}
	if _, ok := mpc.mutation.Attempts(); !ok {
		v := moduleprogress.DefaultAttempts
		mpc.mutation.SetAttempts(v)
	}
	if _, ok := mpc.mutation.CreatedAt(); !ok {
		v := moduleprogress.DefaultCreatedAt()
		mpc.mutation.SetCreatedAt(v)
	}
	if _, ok := mpc.mutation.UpdatedAt(); !ok {
		v := moduleprogress.DefaultUpdatedAt()
		mpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mpc.mutation.ID(); !ok {
		v := moduleprogress.DefaultID()
		mpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *ModuleProgressCreate) check() error {
	if _, ok := mpc.mutation.EnrollmentID(); !ok {
		return &ValidationError{Name: "enrollment_id", err: errors.New(`ent: missing required field "ModuleProgress.enrollment_id"`)}
	}
	if _, ok := mpc.mutation.ModuleID(); !ok {
		return &ValidationError{Name: "module_id", err: errors.New(`ent: missing required field "ModuleProgress.module_id"`)}
	}
	if _, ok := mpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ModuleProgress.status"`)}
	}
	if _, ok := mpc.mutation.Attempts(); !ok {
		return &ValidationError{Name: "attempts", err: errors.New(`ent: missing required field "ModuleProgress.attempts"`)}
	}
	if _, ok := mpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ModuleProgress.created_at"`)}
	}
	if _, ok := mpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ModuleProgress.updated_at"`)}
	}
	if _, ok := mpc.mutation.EnrollmentID(); !ok {
		return &ValidationError{Name: "enrollment", err: errors.New(`ent: missing required edge "ModuleProgress.enrollment"`)}
	}
	if _, ok := mpc.mutation.ModuleID(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`ent: missing required edge "ModuleProgress.module"`)}
	}
	return nil
}

func (mpc *ModuleProgressCreate) sqlSave(ctx context.Context) (*ModuleProgress, error) {
	if err := mpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mpc.mutation.id = &_node.ID
	mpc.mutation.done = true
	return _node, nil
}

func (mpc *ModuleProgressCreate) createSpec() (*ModuleProgress, *sqlgraph.CreateSpec) {
	var (
		_node = &ModuleProgress{config: mpc.config}
		_spec = sqlgraph.NewCreateSpec(moduleprogress.Table, sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID))
	)
	if id, ok := mpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mpc.mutation.Status(); ok {
		_spec.SetField(moduleprogress.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := mpc.mutation.Score(); ok {
		_spec.SetField(moduleprogress.FieldScore, field.TypeFloat32, value)
		_node.Score = value
	}
	if value, ok := mpc.mutation.Attempts(); ok {
		_spec.SetField(moduleprogress.FieldAttempts, field.TypeInt, value)
		_node.Attempts = value
	}
	if value, ok := mpc.mutation.StartedAt(); ok {
		_spec.SetField(moduleprogress.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := mpc.mutation.CompletedAt(); ok {
		_spec.SetField(moduleprogress.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := mpc.mutation.CreatedAt(); ok {
		_spec.SetField(moduleprogress.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mpc.mutation.UpdatedAt(); ok {
		_spec.SetField(moduleprogress.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mpc.mutation.EnrollmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleprogress.EnrollmentTable,
			Columns: []string{moduleprogress.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EnrollmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mpc.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleprogress.ModuleTable,
			Columns: []string{moduleprogress.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModuleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ModuleProgressCreateBulk is the builder for creating many ModuleProgress entities in bulk.
type ModuleProgressCreateBulk struct {
	config
	err      error
	builders []*ModuleProgressCreate
}

// Save creates the ModuleProgress entities in the database.
func (mpcb *ModuleProgressCreateBulk) Save(ctx context.Context) ([]*ModuleProgress, error) {
	if mpcb.err != nil {
		return nil, mpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*ModuleProgress, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModuleProgressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *ModuleProgressCreateBulk) SaveX(ctx context.Context) []*ModuleProgress {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *ModuleProgressCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *ModuleProgressCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
