// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ContentsColumns holds the columns for the "contents" table.
	ContentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "mime_type", Type: field.TypeString},
		{Name: "size_bytes", Type: field.TypeInt64, Nullable: true},
		{Name: "storage_key", Type: field.TypeString},
		{Name: "status", Type: field.TypeString, Default: "pending"},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "organization_id", Type: field.TypeUUID},
	}
	// ContentsTable holds the schema information for the "contents" table.
	ContentsTable = &schema.Table{
		Name:       "contents",
		Columns:    ContentsColumns,
		PrimaryKey: []*schema.Column{ContentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "contents_organizations_contents",
				Columns:    []*schema.Column{ContentsColumns[9]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "content_organization_id_storage_key",
				Unique:  true,
				Columns: []*schema.Column{ContentsColumns[9], ContentsColumns[4]},
			},
			{
				Name:    "content_organization_id_name",
				Unique:  false,
				Columns: []*schema.Column{ContentsColumns[9], ContentsColumns[1]},
			},
		},
	}
	// CoursesColumns holds the columns for the "courses" table.
	CoursesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "title", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeString, Default: "draft"},
		{Name: "version", Type: field.TypeInt, Default: 1},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "published_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "organization_id", Type: field.TypeUUID},
	}
	// CoursesTable holds the schema information for the "courses" table.
	CoursesTable = &schema.Table{
		Name:       "courses",
		Columns:    CoursesColumns,
		PrimaryKey: []*schema.Column{CoursesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "courses_organizations_courses",
				Columns:    []*schema.Column{CoursesColumns[10]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "course_organization_id_slug",
				Unique:  true,
				Columns: []*schema.Column{CoursesColumns[10], CoursesColumns[2]},
			},
			{
				Name:    "course_organization_id_status",
				Unique:  false,
				Columns: []*schema.Column{CoursesColumns[10], CoursesColumns[4]},
			},
		},
	}
	// ModulesColumns holds the columns for the "modules" table.
	ModulesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "content_id", Type: field.TypeUUID, Nullable: true},
		{Name: "title", Type: field.TypeString},
		{Name: "module_type", Type: field.TypeString},
		{Name: "position", Type: field.TypeInt, Default: 0},
		{Name: "duration_seconds", Type: field.TypeInt, Nullable: true},
		{Name: "status", Type: field.TypeString, Default: "active"},
		{Name: "data", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "course_id", Type: field.TypeUUID},
	}
	// ModulesTable holds the schema information for the "modules" table.
	ModulesTable = &schema.Table{
		Name:       "modules",
		Columns:    ModulesColumns,
		PrimaryKey: []*schema.Column{ModulesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "modules_courses_modules",
				Columns:    []*schema.Column{ModulesColumns[10]},
				RefColumns: []*schema.Column{CoursesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "module_course_id_position",
				Unique:  false,
				Columns: []*schema.Column{ModulesColumns[10], ModulesColumns[4]},
			},
			{
				Name:    "module_course_id_status",
				Unique:  false,
				Columns: []*schema.Column{ModulesColumns[10], ModulesColumns[6]},
			},
		},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "slug", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeString, Default: "active"},
		{Name: "settings", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "email", Type: field.TypeString},
		{Name: "password_hash", Type: field.TypeString},
		{Name: "role", Type: field.TypeString, Default: "learner"},
		{Name: "status", Type: field.TypeString, Default: "active"},
		{Name: "refresh_token_id", Type: field.TypeString, Nullable: true},
		{Name: "last_login_at", Type: field.TypeTime, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "organization_id", Type: field.TypeUUID},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_organizations_users",
				Columns:    []*schema.Column{UsersColumns[10]},
				RefColumns: []*schema.Column{OrganizationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_organization_id_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[10], UsersColumns[1]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ContentsTable,
		CoursesTable,
		ModulesTable,
		OrganizationsTable,
		UsersTable,
	}
)

func init() {
	ContentsTable.ForeignKeys[0].RefTable = OrganizationsTable
	CoursesTable.ForeignKeys[0].RefTable = OrganizationsTable
	ModulesTable.ForeignKeys[0].RefTable = CoursesTable
	UsersTable.ForeignKeys[0].RefTable = OrganizationsTable
}
