// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-go/internal/ent/course"
	"lms-go/internal/ent/enrollment"
	"lms-go/internal/ent/group"
	"lms-go/internal/ent/module"
	"lms-go/internal/ent/organization"
	"lms-go/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks    []Hook
	mutation *CourseMutation
}

// Where appends a list predicates to the CourseUpdate builder.
func (cu *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetOrganizationID sets the "organization_id" field.
func (cu *CourseUpdate) SetOrganizationID(u uuid.UUID) *CourseUpdate {
	cu.mutation.SetOrganizationID(u)
	return cu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableOrganizationID(u *uuid.UUID) *CourseUpdate {
	if u != nil {
		cu.SetOrganizationID(*u)
	}
	return cu
}

// SetTitle sets the "title" field.
func (cu *CourseUpdate) SetTitle(s string) *CourseUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableTitle(s *string) *CourseUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// SetSlug sets the "slug" field.
func (cu *CourseUpdate) SetSlug(s string) *CourseUpdate {
	cu.mutation.SetSlug(s)
	return cu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableSlug(s *string) *CourseUpdate {
	if s != nil {
		cu.SetSlug(*s)
	}
	return cu
}

// SetDescription sets the "description" field.
func (cu *CourseUpdate) SetDescription(s string) *CourseUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableDescription(s *string) *CourseUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CourseUpdate) ClearDescription() *CourseUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetStatus sets the "status" field.
func (cu *CourseUpdate) SetStatus(s string) *CourseUpdate {
	cu.mutation.SetStatus(s)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableStatus(s *string) *CourseUpdate {
	if s != nil {
		cu.SetStatus(*s)
	}
	return cu
}

// SetVersion sets the "version" field.
func (cu *CourseUpdate) SetVersion(i int) *CourseUpdate {
	cu.mutation.ResetVersion()
	cu.mutation.SetVersion(i)
	return cu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cu *CourseUpdate) SetNillableVersion(i *int) *CourseUpdate {
	if i != nil {
		cu.SetVersion(*i)
	}
	return cu
}

// AddVersion adds i to the "version" field.
func (cu *CourseUpdate) AddVersion(i int) *CourseUpdate {
	cu.mutation.AddVersion(i)
	return cu
}

// SetMetadata sets the "metadata" field.
func (cu *CourseUpdate) SetMetadata(m map[string]interface{}) *CourseUpdate {
	cu.mutation.SetMetadata(m)
	return cu
}

// ClearMetadata clears the value of the "metadata" field.
func (cu *CourseUpdate) ClearMetadata() *CourseUpdate {
	cu.mutation.ClearMetadata()
	return cu
}

// SetPublishedAt sets the "published_at" field.
func (cu *CourseUpdate) SetPublishedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetPublishedAt(t)
	return cu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (cu *CourseUpdate) SetNillablePublishedAt(t *time.Time) *CourseUpdate {
	if t != nil {
		cu.SetPublishedAt(*t)
	}
	return cu
}

// ClearPublishedAt clears the value of the "published_at" field.
func (cu *CourseUpdate) ClearPublishedAt() *CourseUpdate {
	cu.mutation.ClearPublishedAt()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CourseUpdate) SetUpdatedAt(t time.Time) *CourseUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cu *CourseUpdate) SetOrganization(o *Organization) *CourseUpdate {
	return cu.SetOrganizationID(o.ID)
}

// AddModuleIDs adds the "modules" edge to the Module entity by IDs.
func (cu *CourseUpdate) AddModuleIDs(ids ...uuid.UUID) *CourseUpdate {
	cu.mutation.AddModuleIDs(ids...)
	return cu
}

// AddModules adds the "modules" edges to the Module entity.
func (cu *CourseUpdate) AddModules(m ...*Module) *CourseUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddModuleIDs(ids...)
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by IDs.
func (cu *CourseUpdate) AddEnrollmentIDs(ids ...uuid.UUID) *CourseUpdate {
	cu.mutation.AddEnrollmentIDs(ids...)
	return cu
}

// AddEnrollments adds the "enrollments" edges to the Enrollment entity.
func (cu *CourseUpdate) AddEnrollments(e ...*Enrollment) *CourseUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddEnrollmentIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (cu *CourseUpdate) AddGroupIDs(ids ...uuid.UUID) *CourseUpdate {
	cu.mutation.AddGroupIDs(ids...)
	return cu
}

// AddGroups adds the "groups" edges to the Group entity.
func (cu *CourseUpdate) AddGroups(g ...*Group) *CourseUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.AddGroupIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cu *CourseUpdate) Mutation() *CourseMutation {
	return cu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (cu *CourseUpdate) ClearOrganization() *CourseUpdate {
	cu.mutation.ClearOrganization()
	return cu
}

// ClearModules clears all "modules" edges to the Module entity.
func (cu *CourseUpdate) ClearModules() *CourseUpdate {
	cu.mutation.ClearModules()
	return cu
}

// RemoveModuleIDs removes the "modules" edge to Module entities by IDs.
func (cu *CourseUpdate) RemoveModuleIDs(ids ...uuid.UUID) *CourseUpdate {
	cu.mutation.RemoveModuleIDs(ids...)
	return cu
}

// RemoveModules removes "modules" edges to Module entities.
func (cu *CourseUpdate) RemoveModules(m ...*Module) *CourseUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveModuleIDs(ids...)
}

// ClearEnrollments clears all "enrollments" edges to the Enrollment entity.
func (cu *CourseUpdate) ClearEnrollments() *CourseUpdate {
	cu.mutation.ClearEnrollments()
	return cu
}

// RemoveEnrollmentIDs removes the "enrollments" edge to Enrollment entities by IDs.
func (cu *CourseUpdate) RemoveEnrollmentIDs(ids ...uuid.UUID) *CourseUpdate {
	cu.mutation.RemoveEnrollmentIDs(ids...)
	return cu
}

// RemoveEnrollments removes "enrollments" edges to Enrollment entities.
func (cu *CourseUpdate) RemoveEnrollments(e ...*Enrollment) *CourseUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveEnrollmentIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (cu *CourseUpdate) ClearGroups() *CourseUpdate {
	cu.mutation.ClearGroups()
	return cu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (cu *CourseUpdate) RemoveGroupIDs(ids ...uuid.UUID) *CourseUpdate {
	cu.mutation.RemoveGroupIDs(ids...)
	return cu
}

// RemoveGroups removes "groups" edges to Group entities.
func (cu *CourseUpdate) RemoveGroups(g ...*Group) *CourseUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.RemoveGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CourseUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CourseUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CourseUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CourseUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := course.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CourseUpdate) check() error {
	if v, ok := cu.mutation.Title(); ok {
		if err := course.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Course.title": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Slug(); ok {
		if err := course.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Course.slug": %w`, err)}
		}
	}
	if _, ok := cu.mutation.OrganizationID(); cu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Course.organization"`)
	}
	return nil
}

func (cu *CourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(course.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Slug(); ok {
		_spec.SetField(course.FieldSlug, field.TypeString, value)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(course.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(course.FieldStatus, field.TypeString, value)
	}
	if value, ok := cu.mutation.Version(); ok {
		_spec.SetField(course.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedVersion(); ok {
		_spec.AddField(course.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Metadata(); ok {
		_spec.SetField(course.FieldMetadata, field.TypeJSON, value)
	}
	if cu.mutation.MetadataCleared() {
		_spec.ClearField(course.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cu.mutation.PublishedAt(); ok {
		_spec.SetField(course.FieldPublishedAt, field.TypeTime, value)
	}
	if cu.mutation.PublishedAtCleared() {
		_spec.ClearField(course.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(course.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OrganizationTable,
			Columns: []string{course.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OrganizationTable,
			Columns: []string{course.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ModulesTable,
			Columns: []string{course.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedModulesIDs(); len(nodes) > 0 && !cu.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ModulesTable,
			Columns: []string{course.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ModulesTable,
			Columns: []string{course.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedEnrollmentsIDs(); len(nodes) > 0 && !cu.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EnrollmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.GroupsTable,
			Columns: []string{course.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !cu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.GroupsTable,
			Columns: []string{course.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.GroupsTable,
			Columns: []string{course.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CourseMutation
}

// SetOrganizationID sets the "organization_id" field.
func (cuo *CourseUpdateOne) SetOrganizationID(u uuid.UUID) *CourseUpdateOne {
	cuo.mutation.SetOrganizationID(u)
	return cuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *CourseUpdateOne {
	if u != nil {
		cuo.SetOrganizationID(*u)
	}
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *CourseUpdateOne) SetTitle(s string) *CourseUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableTitle(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// SetSlug sets the "slug" field.
func (cuo *CourseUpdateOne) SetSlug(s string) *CourseUpdateOne {
	cuo.mutation.SetSlug(s)
	return cuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableSlug(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetSlug(*s)
	}
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CourseUpdateOne) SetDescription(s string) *CourseUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableDescription(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CourseUpdateOne) ClearDescription() *CourseUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CourseUpdateOne) SetStatus(s string) *CourseUpdateOne {
	cuo.mutation.SetStatus(s)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableStatus(s *string) *CourseUpdateOne {
	if s != nil {
		cuo.SetStatus(*s)
	}
	return cuo
}

// SetVersion sets the "version" field.
func (cuo *CourseUpdateOne) SetVersion(i int) *CourseUpdateOne {
	cuo.mutation.ResetVersion()
	cuo.mutation.SetVersion(i)
	return cuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableVersion(i *int) *CourseUpdateOne {
	if i != nil {
		cuo.SetVersion(*i)
	}
	return cuo
}

// AddVersion adds i to the "version" field.
func (cuo *CourseUpdateOne) AddVersion(i int) *CourseUpdateOne {
	cuo.mutation.AddVersion(i)
	return cuo
}

// SetMetadata sets the "metadata" field.
func (cuo *CourseUpdateOne) SetMetadata(m map[string]interface{}) *CourseUpdateOne {
	cuo.mutation.SetMetadata(m)
	return cuo
}

// ClearMetadata clears the value of the "metadata" field.
func (cuo *CourseUpdateOne) ClearMetadata() *CourseUpdateOne {
	cuo.mutation.ClearMetadata()
	return cuo
}

// SetPublishedAt sets the "published_at" field.
func (cuo *CourseUpdateOne) SetPublishedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetPublishedAt(t)
	return cuo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillablePublishedAt(t *time.Time) *CourseUpdateOne {
	if t != nil {
		cuo.SetPublishedAt(*t)
	}
	return cuo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (cuo *CourseUpdateOne) ClearPublishedAt() *CourseUpdateOne {
	cuo.mutation.ClearPublishedAt()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CourseUpdateOne) SetUpdatedAt(t time.Time) *CourseUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cuo *CourseUpdateOne) SetOrganization(o *Organization) *CourseUpdateOne {
	return cuo.SetOrganizationID(o.ID)
}

// AddModuleIDs adds the "modules" edge to the Module entity by IDs.
func (cuo *CourseUpdateOne) AddModuleIDs(ids ...uuid.UUID) *CourseUpdateOne {
	cuo.mutation.AddModuleIDs(ids...)
	return cuo
}

// AddModules adds the "modules" edges to the Module entity.
func (cuo *CourseUpdateOne) AddModules(m ...*Module) *CourseUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddModuleIDs(ids...)
}

// AddEnrollmentIDs adds the "enrollments" edge to the Enrollment entity by IDs.
func (cuo *CourseUpdateOne) AddEnrollmentIDs(ids ...uuid.UUID) *CourseUpdateOne {
	cuo.mutation.AddEnrollmentIDs(ids...)
	return cuo
}

// AddEnrollments adds the "enrollments" edges to the Enrollment entity.
func (cuo *CourseUpdateOne) AddEnrollments(e ...*Enrollment) *CourseUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddEnrollmentIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (cuo *CourseUpdateOne) AddGroupIDs(ids ...uuid.UUID) *CourseUpdateOne {
	cuo.mutation.AddGroupIDs(ids...)
	return cuo
}

// AddGroups adds the "groups" edges to the Group entity.
func (cuo *CourseUpdateOne) AddGroups(g ...*Group) *CourseUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.AddGroupIDs(ids...)
}

// Mutation returns the CourseMutation object of the builder.
func (cuo *CourseUpdateOne) Mutation() *CourseMutation {
	return cuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (cuo *CourseUpdateOne) ClearOrganization() *CourseUpdateOne {
	cuo.mutation.ClearOrganization()
	return cuo
}

// ClearModules clears all "modules" edges to the Module entity.
func (cuo *CourseUpdateOne) ClearModules() *CourseUpdateOne {
	cuo.mutation.ClearModules()
	return cuo
}

// RemoveModuleIDs removes the "modules" edge to Module entities by IDs.
func (cuo *CourseUpdateOne) RemoveModuleIDs(ids ...uuid.UUID) *CourseUpdateOne {
	cuo.mutation.RemoveModuleIDs(ids...)
	return cuo
}

// RemoveModules removes "modules" edges to Module entities.
func (cuo *CourseUpdateOne) RemoveModules(m ...*Module) *CourseUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveModuleIDs(ids...)
}

// ClearEnrollments clears all "enrollments" edges to the Enrollment entity.
func (cuo *CourseUpdateOne) ClearEnrollments() *CourseUpdateOne {
	cuo.mutation.ClearEnrollments()
	return cuo
}

// RemoveEnrollmentIDs removes the "enrollments" edge to Enrollment entities by IDs.
func (cuo *CourseUpdateOne) RemoveEnrollmentIDs(ids ...uuid.UUID) *CourseUpdateOne {
	cuo.mutation.RemoveEnrollmentIDs(ids...)
	return cuo
}

// RemoveEnrollments removes "enrollments" edges to Enrollment entities.
func (cuo *CourseUpdateOne) RemoveEnrollments(e ...*Enrollment) *CourseUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveEnrollmentIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (cuo *CourseUpdateOne) ClearGroups() *CourseUpdateOne {
	cuo.mutation.ClearGroups()
	return cuo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (cuo *CourseUpdateOne) RemoveGroupIDs(ids ...uuid.UUID) *CourseUpdateOne {
	cuo.mutation.RemoveGroupIDs(ids...)
	return cuo
}

// RemoveGroups removes "groups" edges to Group entities.
func (cuo *CourseUpdateOne) RemoveGroups(g ...*Group) *CourseUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.RemoveGroupIDs(ids...)
}

// Where appends a list predicates to the CourseUpdate builder.
func (cuo *CourseUpdateOne) Where(ps ...predicate.Course) *CourseUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CourseUpdateOne) Select(field string, fields ...string) *CourseUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Course entity.
func (cuo *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CourseUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := course.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CourseUpdateOne) check() error {
	if v, ok := cuo.mutation.Title(); ok {
		if err := course.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Course.title": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Slug(); ok {
		if err := course.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Course.slug": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.OrganizationID(); cuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Course.organization"`)
	}
	return nil
}

func (cuo *CourseUpdateOne) sqlSave(ctx context.Context) (_node *Course, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(course.Table, course.Columns, sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Course.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, course.FieldID)
		for _, f := range fields {
			if !course.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != course.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(course.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Slug(); ok {
		_spec.SetField(course.FieldSlug, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(course.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(course.FieldStatus, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Version(); ok {
		_spec.SetField(course.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedVersion(); ok {
		_spec.AddField(course.FieldVersion, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Metadata(); ok {
		_spec.SetField(course.FieldMetadata, field.TypeJSON, value)
	}
	if cuo.mutation.MetadataCleared() {
		_spec.ClearField(course.FieldMetadata, field.TypeJSON)
	}
	if value, ok := cuo.mutation.PublishedAt(); ok {
		_spec.SetField(course.FieldPublishedAt, field.TypeTime, value)
	}
	if cuo.mutation.PublishedAtCleared() {
		_spec.ClearField(course.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(course.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OrganizationTable,
			Columns: []string{course.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.OrganizationTable,
			Columns: []string{course.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ModulesTable,
			Columns: []string{course.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedModulesIDs(); len(nodes) > 0 && !cuo.mutation.ModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ModulesTable,
			Columns: []string{course.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ModulesTable,
			Columns: []string{course.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedEnrollmentsIDs(); len(nodes) > 0 && !cuo.mutation.EnrollmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EnrollmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.EnrollmentsTable,
			Columns: []string{course.EnrollmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.GroupsTable,
			Columns: []string{course.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !cuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.GroupsTable,
			Columns: []string{course.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.GroupsTable,
			Columns: []string{course.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Course{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
