// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"lms-go/internal/ent/course"
	"lms-go/internal/ent/enrollment"
	"lms-go/internal/ent/group"
	"lms-go/internal/ent/organization"
	"lms-go/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Enrollment is the model entity for the Enrollment schema.
type Enrollment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// OrganizationID holds the value of the "organization_id" field.
	OrganizationID uuid.UUID `json:"organization_id,omitempty"`
	// CourseID holds the value of the "course_id" field.
	CourseID uuid.UUID `json:"course_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID *uuid.UUID `json:"group_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Progress holds the value of the "progress" field.
	Progress float32 `json:"progress,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnrollmentQuery when eager-loading is set.
	Edges        EnrollmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EnrollmentEdges holds the relations/edges for other nodes in the graph.
type EnrollmentEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// ProgressEntries holds the value of the progress_entries edge.
	ProgressEntries []*ModuleProgress `json:"progress_entries,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnrollmentEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnrollmentEdges) CourseOrErr() (*Course, error) {
	if e.Course != nil {
		return e.Course, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: course.Label}
	}
	return nil, &NotLoadedError{edge: "course"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnrollmentEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnrollmentEdges) GroupOrErr() (*Group, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: group.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// ProgressEntriesOrErr returns the ProgressEntries value or an error if the edge
// was not loaded in eager-loading.
func (e EnrollmentEdges) ProgressEntriesOrErr() ([]*ModuleProgress, error) {
	if e.loadedTypes[4] {
		return e.ProgressEntries, nil
	}
	return nil, &NotLoadedError{edge: "progress_entries"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Enrollment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enrollment.FieldGroupID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case enrollment.FieldMetadata:
			values[i] = new([]byte)
		case enrollment.FieldProgress:
			values[i] = new(sql.NullFloat64)
		case enrollment.FieldStatus:
			values[i] = new(sql.NullString)
		case enrollment.FieldStartedAt, enrollment.FieldCompletedAt, enrollment.FieldCreatedAt, enrollment.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case enrollment.FieldID, enrollment.FieldOrganizationID, enrollment.FieldCourseID, enrollment.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Enrollment fields.
func (e *Enrollment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enrollment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case enrollment.FieldOrganizationID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value != nil {
				e.OrganizationID = *value
			}
		case enrollment.FieldCourseID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value != nil {
				e.CourseID = *value
			}
		case enrollment.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				e.UserID = *value
			}
		case enrollment.FieldGroupID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				e.GroupID = new(uuid.UUID)
				*e.GroupID = *value.S.(*uuid.UUID)
			}
		case enrollment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				e.Status = value.String
			}
		case enrollment.FieldProgress:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field progress", values[i])
			} else if value.Valid {
				e.Progress = float32(value.Float64)
			}
		case enrollment.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				e.StartedAt = new(time.Time)
				*e.StartedAt = value.Time
			}
		case enrollment.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				e.CompletedAt = new(time.Time)
				*e.CompletedAt = value.Time
			}
		case enrollment.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &e.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case enrollment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case enrollment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Enrollment.
// This includes values selected through modifiers, order, etc.
func (e *Enrollment) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the Enrollment entity.
func (e *Enrollment) QueryOrganization() *OrganizationQuery {
	return NewEnrollmentClient(e.config).QueryOrganization(e)
}

// QueryCourse queries the "course" edge of the Enrollment entity.
func (e *Enrollment) QueryCourse() *CourseQuery {
	return NewEnrollmentClient(e.config).QueryCourse(e)
}

// QueryUser queries the "user" edge of the Enrollment entity.
func (e *Enrollment) QueryUser() *UserQuery {
	return NewEnrollmentClient(e.config).QueryUser(e)
}

// QueryGroup queries the "group" edge of the Enrollment entity.
func (e *Enrollment) QueryGroup() *GroupQuery {
	return NewEnrollmentClient(e.config).QueryGroup(e)
}

// QueryProgressEntries queries the "progress_entries" edge of the Enrollment entity.
func (e *Enrollment) QueryProgressEntries() *ModuleProgressQuery {
	return NewEnrollmentClient(e.config).QueryProgressEntries(e)
}

// Update returns a builder for updating this Enrollment.
// Note that you need to call Enrollment.Unwrap() before calling this method if this Enrollment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Enrollment) Update() *EnrollmentUpdateOne {
	return NewEnrollmentClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Enrollment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Enrollment) Unwrap() *Enrollment {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Enrollment is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Enrollment) String() string {
	var builder strings.Builder
	builder.WriteString("Enrollment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("organization_id=")
	builder.WriteString(fmt.Sprintf("%v", e.OrganizationID))
	builder.WriteString(", ")
	builder.WriteString("course_id=")
	builder.WriteString(fmt.Sprintf("%v", e.CourseID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", e.UserID))
	builder.WriteString(", ")
	if v := e.GroupID; v != nil {
		builder.WriteString("group_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(e.Status)
	builder.WriteString(", ")
	builder.WriteString("progress=")
	builder.WriteString(fmt.Sprintf("%v", e.Progress))
	builder.WriteString(", ")
	if v := e.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := e.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", e.Metadata))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Enrollments is a parsable slice of Enrollment.
type Enrollments []*Enrollment
