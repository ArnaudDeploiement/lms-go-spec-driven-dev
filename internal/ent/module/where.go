// Code generated by ent, DO NOT EDIT.

package module

import (
	"lms-go/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldLTE(FieldID, id))
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldCourseID, v))
}

// ContentID applies equality check predicate on the "content_id" field. It's identical to ContentIDEQ.
func ContentID(v uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldContentID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldTitle, v))
}

// ModuleType applies equality check predicate on the "module_type" field. It's identical to ModuleTypeEQ.
func ModuleType(v string) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldModuleType, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v int) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldPosition, v))
}

// DurationSeconds applies equality check predicate on the "duration_seconds" field. It's identical to DurationSecondsEQ.
func DurationSeconds(v int) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldDurationSeconds, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldUpdatedAt, v))
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldCourseID, v))
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldNEQ(FieldCourseID, v))
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldIn(FieldCourseID, vs...))
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldNotIn(FieldCourseID, vs...))
}

// ContentIDEQ applies the EQ predicate on the "content_id" field.
func ContentIDEQ(v uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldContentID, v))
}

// ContentIDNEQ applies the NEQ predicate on the "content_id" field.
func ContentIDNEQ(v uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldNEQ(FieldContentID, v))
}

// ContentIDIn applies the In predicate on the "content_id" field.
func ContentIDIn(vs ...uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldIn(FieldContentID, vs...))
}

// ContentIDNotIn applies the NotIn predicate on the "content_id" field.
func ContentIDNotIn(vs ...uuid.UUID) predicate.Module {
	return predicate.Module(sql.FieldNotIn(FieldContentID, vs...))
}

// ContentIDIsNil applies the IsNil predicate on the "content_id" field.
func ContentIDIsNil() predicate.Module {
	return predicate.Module(sql.FieldIsNull(FieldContentID))
}

// ContentIDNotNil applies the NotNil predicate on the "content_id" field.
func ContentIDNotNil() predicate.Module {
	return predicate.Module(sql.FieldNotNull(FieldContentID))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Module {
	return predicate.Module(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Module {
	return predicate.Module(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Module {
	return predicate.Module(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Module {
	return predicate.Module(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Module {
	return predicate.Module(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Module {
	return predicate.Module(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Module {
	return predicate.Module(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Module {
	return predicate.Module(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Module {
	return predicate.Module(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Module {
	return predicate.Module(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Module {
	return predicate.Module(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Module {
	return predicate.Module(sql.FieldContainsFold(FieldTitle, v))
}

// ModuleTypeEQ applies the EQ predicate on the "module_type" field.
func ModuleTypeEQ(v string) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldModuleType, v))
}

// ModuleTypeNEQ applies the NEQ predicate on the "module_type" field.
func ModuleTypeNEQ(v string) predicate.Module {
	return predicate.Module(sql.FieldNEQ(FieldModuleType, v))
}

// ModuleTypeIn applies the In predicate on the "module_type" field.
func ModuleTypeIn(vs ...string) predicate.Module {
	return predicate.Module(sql.FieldIn(FieldModuleType, vs...))
}

// ModuleTypeNotIn applies the NotIn predicate on the "module_type" field.
func ModuleTypeNotIn(vs ...string) predicate.Module {
	return predicate.Module(sql.FieldNotIn(FieldModuleType, vs...))
}

// ModuleTypeGT applies the GT predicate on the "module_type" field.
func ModuleTypeGT(v string) predicate.Module {
	return predicate.Module(sql.FieldGT(FieldModuleType, v))
}

// ModuleTypeGTE applies the GTE predicate on the "module_type" field.
func ModuleTypeGTE(v string) predicate.Module {
	return predicate.Module(sql.FieldGTE(FieldModuleType, v))
}

// ModuleTypeLT applies the LT predicate on the "module_type" field.
func ModuleTypeLT(v string) predicate.Module {
	return predicate.Module(sql.FieldLT(FieldModuleType, v))
}

// ModuleTypeLTE applies the LTE predicate on the "module_type" field.
func ModuleTypeLTE(v string) predicate.Module {
	return predicate.Module(sql.FieldLTE(FieldModuleType, v))
}

// ModuleTypeContains applies the Contains predicate on the "module_type" field.
func ModuleTypeContains(v string) predicate.Module {
	return predicate.Module(sql.FieldContains(FieldModuleType, v))
}

// ModuleTypeHasPrefix applies the HasPrefix predicate on the "module_type" field.
func ModuleTypeHasPrefix(v string) predicate.Module {
	return predicate.Module(sql.FieldHasPrefix(FieldModuleType, v))
}

// ModuleTypeHasSuffix applies the HasSuffix predicate on the "module_type" field.
func ModuleTypeHasSuffix(v string) predicate.Module {
	return predicate.Module(sql.FieldHasSuffix(FieldModuleType, v))
}

// ModuleTypeEqualFold applies the EqualFold predicate on the "module_type" field.
func ModuleTypeEqualFold(v string) predicate.Module {
	return predicate.Module(sql.FieldEqualFold(FieldModuleType, v))
}

// ModuleTypeContainsFold applies the ContainsFold predicate on the "module_type" field.
func ModuleTypeContainsFold(v string) predicate.Module {
	return predicate.Module(sql.FieldContainsFold(FieldModuleType, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v int) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v int) predicate.Module {
	return predicate.Module(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...int) predicate.Module {
	return predicate.Module(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...int) predicate.Module {
	return predicate.Module(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v int) predicate.Module {
	return predicate.Module(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v int) predicate.Module {
	return predicate.Module(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v int) predicate.Module {
	return predicate.Module(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v int) predicate.Module {
	return predicate.Module(sql.FieldLTE(FieldPosition, v))
}

// DurationSecondsEQ applies the EQ predicate on the "duration_seconds" field.
func DurationSecondsEQ(v int) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldDurationSeconds, v))
}

// DurationSecondsNEQ applies the NEQ predicate on the "duration_seconds" field.
func DurationSecondsNEQ(v int) predicate.Module {
	return predicate.Module(sql.FieldNEQ(FieldDurationSeconds, v))
}

// DurationSecondsIn applies the In predicate on the "duration_seconds" field.
func DurationSecondsIn(vs ...int) predicate.Module {
	return predicate.Module(sql.FieldIn(FieldDurationSeconds, vs...))
}

// DurationSecondsNotIn applies the NotIn predicate on the "duration_seconds" field.
func DurationSecondsNotIn(vs ...int) predicate.Module {
	return predicate.Module(sql.FieldNotIn(FieldDurationSeconds, vs...))
}

// DurationSecondsGT applies the GT predicate on the "duration_seconds" field.
func DurationSecondsGT(v int) predicate.Module {
	return predicate.Module(sql.FieldGT(FieldDurationSeconds, v))
}

// DurationSecondsGTE applies the GTE predicate on the "duration_seconds" field.
func DurationSecondsGTE(v int) predicate.Module {
	return predicate.Module(sql.FieldGTE(FieldDurationSeconds, v))
}

// DurationSecondsLT applies the LT predicate on the "duration_seconds" field.
func DurationSecondsLT(v int) predicate.Module {
	return predicate.Module(sql.FieldLT(FieldDurationSeconds, v))
}

// DurationSecondsLTE applies the LTE predicate on the "duration_seconds" field.
func DurationSecondsLTE(v int) predicate.Module {
	return predicate.Module(sql.FieldLTE(FieldDurationSeconds, v))
}

// DurationSecondsIsNil applies the IsNil predicate on the "duration_seconds" field.
func DurationSecondsIsNil() predicate.Module {
	return predicate.Module(sql.FieldIsNull(FieldDurationSeconds))
}

// DurationSecondsNotNil applies the NotNil predicate on the "duration_seconds" field.
func DurationSecondsNotNil() predicate.Module {
	return predicate.Module(sql.FieldNotNull(FieldDurationSeconds))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Module {
	return predicate.Module(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Module {
	return predicate.Module(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Module {
	return predicate.Module(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Module {
	return predicate.Module(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Module {
	return predicate.Module(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Module {
	return predicate.Module(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Module {
	return predicate.Module(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Module {
	return predicate.Module(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Module {
	return predicate.Module(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Module {
	return predicate.Module(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Module {
	return predicate.Module(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Module {
	return predicate.Module(sql.FieldContainsFold(FieldStatus, v))
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.Module {
	return predicate.Module(sql.FieldIsNull(FieldData))
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.Module {
	return predicate.Module(sql.FieldNotNull(FieldData))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Module {
	return predicate.Module(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Module {
	return predicate.Module(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Module {
	return predicate.Module(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Module {
	return predicate.Module(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Module {
	return predicate.Module(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.Module {
	return predicate.Module(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.Course) predicate.Module {
	return predicate.Module(func(s *sql.Selector) {
		step := newCourseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContent applies the HasEdge predicate on the "content" edge.
func HasContent() predicate.Module {
	return predicate.Module(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ContentTable, ContentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContentWith applies the HasEdge predicate on the "content" edge with a given conditions (other predicates).
func HasContentWith(preds ...predicate.Content) predicate.Module {
	return predicate.Module(func(s *sql.Selector) {
		step := newContentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgressEntries applies the HasEdge predicate on the "progress_entries" edge.
func HasProgressEntries() predicate.Module {
	return predicate.Module(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProgressEntriesTable, ProgressEntriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgressEntriesWith applies the HasEdge predicate on the "progress_entries" edge with a given conditions (other predicates).
func HasProgressEntriesWith(preds ...predicate.ModuleProgress) predicate.Module {
	return predicate.Module(func(s *sql.Selector) {
		step := newProgressEntriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Module) predicate.Module {
	return predicate.Module(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Module) predicate.Module {
	return predicate.Module(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Module) predicate.Module {
	return predicate.Module(sql.NotPredicates(p))
}
