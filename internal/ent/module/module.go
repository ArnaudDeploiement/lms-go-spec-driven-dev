// Code generated by ent, DO NOT EDIT.

package module

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the module type in the database.
	Label = "module"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCourseID holds the string denoting the course_id field in the database.
	FieldCourseID = "course_id"
	// FieldContentID holds the string denoting the content_id field in the database.
	FieldContentID = "content_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldModuleType holds the string denoting the module_type field in the database.
	FieldModuleType = "module_type"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldDurationSeconds holds the string denoting the duration_seconds field in the database.
	FieldDurationSeconds = "duration_seconds"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeContent holds the string denoting the content edge name in mutations.
	EdgeContent = "content"
	// EdgeProgressEntries holds the string denoting the progress_entries edge name in mutations.
	EdgeProgressEntries = "progress_entries"
	// Table holds the table name of the module in the database.
	Table = "modules"
	// CourseTable is the table that holds the course relation/edge.
	CourseTable = "modules"
	// CourseInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseInverseTable = "courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "course_id"
	// ContentTable is the table that holds the content relation/edge.
	ContentTable = "modules"
	// ContentInverseTable is the table name for the Content entity.
	// It exists in this package in order to avoid circular dependency with the "content" package.
	ContentInverseTable = "contents"
	// ContentColumn is the table column denoting the content relation/edge.
	ContentColumn = "content_id"
	// ProgressEntriesTable is the table that holds the progress_entries relation/edge.
	ProgressEntriesTable = "module_progresses"
	// ProgressEntriesInverseTable is the table name for the ModuleProgress entity.
	// It exists in this package in order to avoid circular dependency with the "moduleprogress" package.
	ProgressEntriesInverseTable = "module_progresses"
	// ProgressEntriesColumn is the table column denoting the progress_entries relation/edge.
	ProgressEntriesColumn = "module_id"
)

// Columns holds all SQL columns for module fields.
var Columns = []string{
	FieldID,
	FieldCourseID,
	FieldContentID,
	FieldTitle,
	FieldModuleType,
	FieldPosition,
	FieldDurationSeconds,
	FieldStatus,
	FieldData,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ModuleTypeValidator is a validator for the "module_type" field. It is called by the builders before save.
	ModuleTypeValidator func(string) error
	// DefaultPosition holds the default value on creation for the "position" field.
	DefaultPosition int
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultData holds the default value on creation for the "data" field.
	DefaultData map[string]interface{}
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Module queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCourseID orders the results by the course_id field.
func ByCourseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCourseID, opts...).ToFunc()
}

// ByContentID orders the results by the content_id field.
func ByContentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByModuleType orders the results by the module_type field.
func ByModuleType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleType, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByDurationSeconds orders the results by the duration_seconds field.
func ByDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationSeconds, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCourseField orders the results by course field.
func ByCourseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCourseStep(), sql.OrderByField(field, opts...))
	}
}

// ByContentField orders the results by content field.
func ByContentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContentStep(), sql.OrderByField(field, opts...))
	}
}

// ByProgressEntriesCount orders the results by progress_entries count.
func ByProgressEntriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgressEntriesStep(), opts...)
	}
}

// ByProgressEntries orders the results by progress_entries terms.
func ByProgressEntries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgressEntriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCourseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CourseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CourseTable, CourseColumn),
	)
}
func newContentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ContentTable, ContentColumn),
	)
}
func newProgressEntriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgressEntriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgressEntriesTable, ProgressEntriesColumn),
	)
}
