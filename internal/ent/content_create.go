// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-go/internal/ent/content"
	"lms-go/internal/ent/module"
	"lms-go/internal/ent/organization"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ContentCreate is the builder for creating a Content entity.
type ContentCreate struct {
	config
	mutation *ContentMutation
	hooks    []Hook
}

// SetOrganizationID sets the "organization_id" field.
func (cc *ContentCreate) SetOrganizationID(u uuid.UUID) *ContentCreate {
	cc.mutation.SetOrganizationID(u)
	return cc
}

// SetName sets the "name" field.
func (cc *ContentCreate) SetName(s string) *ContentCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetMimeType sets the "mime_type" field.
func (cc *ContentCreate) SetMimeType(s string) *ContentCreate {
	cc.mutation.SetMimeType(s)
	return cc
}

// SetSizeBytes sets the "size_bytes" field.
func (cc *ContentCreate) SetSizeBytes(i int64) *ContentCreate {
	cc.mutation.SetSizeBytes(i)
	return cc
}

// SetNillableSizeBytes sets the "size_bytes" field if the given value is not nil.
func (cc *ContentCreate) SetNillableSizeBytes(i *int64) *ContentCreate {
	if i != nil {
		cc.SetSizeBytes(*i)
	}
	return cc
}

// SetStorageKey sets the "storage_key" field.
func (cc *ContentCreate) SetStorageKey(s string) *ContentCreate {
	cc.mutation.SetStorageKey(s)
	return cc
}

// SetStatus sets the "status" field.
func (cc *ContentCreate) SetStatus(s string) *ContentCreate {
	cc.mutation.SetStatus(s)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *ContentCreate) SetNillableStatus(s *string) *ContentCreate {
	if s != nil {
		cc.SetStatus(*s)
	}
	return cc
}

// SetMetadata sets the "metadata" field.
func (cc *ContentCreate) SetMetadata(m map[string]interface{}) *ContentCreate {
	cc.mutation.SetMetadata(m)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ContentCreate) SetCreatedAt(t time.Time) *ContentCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ContentCreate) SetNillableCreatedAt(t *time.Time) *ContentCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ContentCreate) SetUpdatedAt(t time.Time) *ContentCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ContentCreate) SetNillableUpdatedAt(t *time.Time) *ContentCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ContentCreate) SetID(u uuid.UUID) *ContentCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ContentCreate) SetNillableID(u *uuid.UUID) *ContentCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cc *ContentCreate) SetOrganization(o *Organization) *ContentCreate {
	return cc.SetOrganizationID(o.ID)
}

// AddModuleIDs adds the "modules" edge to the Module entity by IDs.
func (cc *ContentCreate) AddModuleIDs(ids ...uuid.UUID) *ContentCreate {
	cc.mutation.AddModuleIDs(ids...)
	return cc
}

// AddModules adds the "modules" edges to the Module entity.
func (cc *ContentCreate) AddModules(m ...*Module) *ContentCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddModuleIDs(ids...)
}

// Mutation returns the ContentMutation object of the builder.
func (cc *ContentCreate) Mutation() *ContentMutation {
	return cc.mutation
}

// Save creates the Content in the database.
func (cc *ContentCreate) Save(ctx context.Context) (*Content, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContentCreate) SaveX(ctx context.Context) *Content {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContentCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContentCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContentCreate) defaults() {
	if _, ok := cc.mutation.Status(); !ok {
		v := content.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.Metadata(); !ok {
		v := content.DefaultMetadata
		cc.mutation.SetMetadata(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := content.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := content.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := content.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContentCreate) check() error {
	if _, ok := cc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Content.organization_id"`)}
	}
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Content.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := content.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Content.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.MimeType(); !ok {
		return &ValidationError{Name: "mime_type", err: errors.New(`ent: missing required field "Content.mime_type"`)}
	}
	if v, ok := cc.mutation.MimeType(); ok {
		if err := content.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "Content.mime_type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.StorageKey(); !ok {
		return &ValidationError{Name: "storage_key", err: errors.New(`ent: missing required field "Content.storage_key"`)}
	}
	if v, ok := cc.mutation.StorageKey(); ok {
		if err := content.StorageKeyValidator(v); err != nil {
			return &ValidationError{Name: "storage_key", err: fmt.Errorf(`ent: validator failed for field "Content.storage_key": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Content.status"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Content.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Content.updated_at"`)}
	}
	if _, ok := cc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Content.organization"`)}
	}
	return nil
}

func (cc *ContentCreate) sqlSave(ctx context.Context) (*Content, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContentCreate) createSpec() (*Content, *sqlgraph.CreateSpec) {
	var (
		_node = &Content{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(content.Table, sqlgraph.NewFieldSpec(content.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(content.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.MimeType(); ok {
		_spec.SetField(content.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := cc.mutation.SizeBytes(); ok {
		_spec.SetField(content.FieldSizeBytes, field.TypeInt64, value)
		_node.SizeBytes = value
	}
	if value, ok := cc.mutation.StorageKey(); ok {
		_spec.SetField(content.FieldStorageKey, field.TypeString, value)
		_node.StorageKey = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(content.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Metadata(); ok {
		_spec.SetField(content.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(content.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(content.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   content.OrganizationTable,
			Columns: []string{content.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   content.ModulesTable,
			Columns: []string{content.ModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContentCreateBulk is the builder for creating many Content entities in bulk.
type ContentCreateBulk struct {
	config
	err      error
	builders []*ContentCreate
}

// Save creates the Content entities in the database.
func (ccb *ContentCreateBulk) Save(ctx context.Context) ([]*Content, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Content, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContentCreateBulk) SaveX(ctx context.Context) []*Content {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContentCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContentCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
