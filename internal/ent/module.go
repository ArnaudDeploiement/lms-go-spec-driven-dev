// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"lms-go/internal/ent/course"
	"lms-go/internal/ent/module"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Module is the model entity for the Module schema.
type Module struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CourseID holds the value of the "course_id" field.
	CourseID uuid.UUID `json:"course_id,omitempty"`
	// ContentID holds the value of the "content_id" field.
	ContentID *uuid.UUID `json:"content_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// ModuleType holds the value of the "module_type" field.
	ModuleType string `json:"module_type,omitempty"`
	// Position holds the value of the "position" field.
	Position int `json:"position,omitempty"`
	// DurationSeconds holds the value of the "duration_seconds" field.
	DurationSeconds int `json:"duration_seconds,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Data holds the value of the "data" field.
	Data map[string]interface{} `json:"data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModuleQuery when eager-loading is set.
	Edges        ModuleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModuleEdges holds the relations/edges for other nodes in the graph.
type ModuleEdges struct {
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// ProgressEntries holds the value of the progress_entries edge.
	ProgressEntries []*ModuleProgress `json:"progress_entries,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModuleEdges) CourseOrErr() (*Course, error) {
	if e.Course != nil {
		return e.Course, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: course.Label}
	}
	return nil, &NotLoadedError{edge: "course"}
}

// ProgressEntriesOrErr returns the ProgressEntries value or an error if the edge
// was not loaded in eager-loading.
func (e ModuleEdges) ProgressEntriesOrErr() ([]*ModuleProgress, error) {
	if e.loadedTypes[1] {
		return e.ProgressEntries, nil
	}
	return nil, &NotLoadedError{edge: "progress_entries"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Module) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case module.FieldContentID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case module.FieldData:
			values[i] = new([]byte)
		case module.FieldPosition, module.FieldDurationSeconds:
			values[i] = new(sql.NullInt64)
		case module.FieldTitle, module.FieldModuleType, module.FieldStatus:
			values[i] = new(sql.NullString)
		case module.FieldCreatedAt, module.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case module.FieldID, module.FieldCourseID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Module fields.
func (m *Module) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case module.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case module.FieldCourseID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field course_id", values[i])
			} else if value != nil {
				m.CourseID = *value
			}
		case module.FieldContentID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field content_id", values[i])
			} else if value.Valid {
				m.ContentID = new(uuid.UUID)
				*m.ContentID = *value.S.(*uuid.UUID)
			}
		case module.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case module.FieldModuleType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module_type", values[i])
			} else if value.Valid {
				m.ModuleType = value.String
			}
		case module.FieldPosition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				m.Position = int(value.Int64)
			}
		case module.FieldDurationSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_seconds", values[i])
			} else if value.Valid {
				m.DurationSeconds = int(value.Int64)
			}
		case module.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = value.String
			}
		case module.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case module.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case module.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Module.
// This includes values selected through modifiers, order, etc.
func (m *Module) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryCourse queries the "course" edge of the Module entity.
func (m *Module) QueryCourse() *CourseQuery {
	return NewModuleClient(m.config).QueryCourse(m)
}

// QueryProgressEntries queries the "progress_entries" edge of the Module entity.
func (m *Module) QueryProgressEntries() *ModuleProgressQuery {
	return NewModuleClient(m.config).QueryProgressEntries(m)
}

// Update returns a builder for updating this Module.
// Note that you need to call Module.Unwrap() before calling this method if this Module
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Module) Update() *ModuleUpdateOne {
	return NewModuleClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Module entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Module) Unwrap() *Module {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Module is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Module) String() string {
	var builder strings.Builder
	builder.WriteString("Module(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("course_id=")
	builder.WriteString(fmt.Sprintf("%v", m.CourseID))
	builder.WriteString(", ")
	if v := m.ContentID; v != nil {
		builder.WriteString("content_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(m.Title)
	builder.WriteString(", ")
	builder.WriteString("module_type=")
	builder.WriteString(m.ModuleType)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(fmt.Sprintf("%v", m.Position))
	builder.WriteString(", ")
	builder.WriteString("duration_seconds=")
	builder.WriteString(fmt.Sprintf("%v", m.DurationSeconds))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(m.Status)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", m.Data))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Modules is a parsable slice of Module.
type Modules []*Module
