// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-go/internal/ent/course"
	"lms-go/internal/ent/enrollment"
	"lms-go/internal/ent/group"
	"lms-go/internal/ent/moduleprogress"
	"lms-go/internal/ent/organization"
	"lms-go/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EnrollmentCreate is the builder for creating a Enrollment entity.
type EnrollmentCreate struct {
	config
	mutation *EnrollmentMutation
	hooks    []Hook
}

// SetOrganizationID sets the "organization_id" field.
func (ec *EnrollmentCreate) SetOrganizationID(u uuid.UUID) *EnrollmentCreate {
	ec.mutation.SetOrganizationID(u)
	return ec
}

// SetCourseID sets the "course_id" field.
func (ec *EnrollmentCreate) SetCourseID(u uuid.UUID) *EnrollmentCreate {
	ec.mutation.SetCourseID(u)
	return ec
}

// SetUserID sets the "user_id" field.
func (ec *EnrollmentCreate) SetUserID(u uuid.UUID) *EnrollmentCreate {
	ec.mutation.SetUserID(u)
	return ec
}

// SetGroupID sets the "group_id" field.
func (ec *EnrollmentCreate) SetGroupID(u uuid.UUID) *EnrollmentCreate {
	ec.mutation.SetGroupID(u)
	return ec
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableGroupID(u *uuid.UUID) *EnrollmentCreate {
	if u != nil {
		ec.SetGroupID(*u)
	}
	return ec
}

// SetStatus sets the "status" field.
func (ec *EnrollmentCreate) SetStatus(s string) *EnrollmentCreate {
	ec.mutation.SetStatus(s)
	return ec
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableStatus(s *string) *EnrollmentCreate {
	if s != nil {
		ec.SetStatus(*s)
	}
	return ec
}

// SetProgress sets the "progress" field.
func (ec *EnrollmentCreate) SetProgress(f float32) *EnrollmentCreate {
	ec.mutation.SetProgress(f)
	return ec
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableProgress(f *float32) *EnrollmentCreate {
	if f != nil {
		ec.SetProgress(*f)
	}
	return ec
}

// SetStartedAt sets the "started_at" field.
func (ec *EnrollmentCreate) SetStartedAt(t time.Time) *EnrollmentCreate {
	ec.mutation.SetStartedAt(t)
	return ec
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableStartedAt(t *time.Time) *EnrollmentCreate {
	if t != nil {
		ec.SetStartedAt(*t)
	}
	return ec
}

// SetCompletedAt sets the "completed_at" field.
func (ec *EnrollmentCreate) SetCompletedAt(t time.Time) *EnrollmentCreate {
	ec.mutation.SetCompletedAt(t)
	return ec
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableCompletedAt(t *time.Time) *EnrollmentCreate {
	if t != nil {
		ec.SetCompletedAt(*t)
	}
	return ec
}

// SetMetadata sets the "metadata" field.
func (ec *EnrollmentCreate) SetMetadata(m map[string]interface{}) *EnrollmentCreate {
	ec.mutation.SetMetadata(m)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EnrollmentCreate) SetCreatedAt(t time.Time) *EnrollmentCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableCreatedAt(t *time.Time) *EnrollmentCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EnrollmentCreate) SetUpdatedAt(t time.Time) *EnrollmentCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableUpdatedAt(t *time.Time) *EnrollmentCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetID sets the "id" field.
func (ec *EnrollmentCreate) SetID(u uuid.UUID) *EnrollmentCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EnrollmentCreate) SetNillableID(u *uuid.UUID) *EnrollmentCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ec *EnrollmentCreate) SetOrganization(o *Organization) *EnrollmentCreate {
	return ec.SetOrganizationID(o.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (ec *EnrollmentCreate) SetCourse(c *Course) *EnrollmentCreate {
	return ec.SetCourseID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (ec *EnrollmentCreate) SetUser(u *User) *EnrollmentCreate {
	return ec.SetUserID(u.ID)
}

// SetGroup sets the "group" edge to the Group entity.
func (ec *EnrollmentCreate) SetGroup(g *Group) *EnrollmentCreate {
	return ec.SetGroupID(g.ID)
}

// AddProgressEntryIDs adds the "progress_entries" edge to the ModuleProgress entity by IDs.
func (ec *EnrollmentCreate) AddProgressEntryIDs(ids ...uuid.UUID) *EnrollmentCreate {
	ec.mutation.AddProgressEntryIDs(ids...)
	return ec
}

// AddProgressEntries adds the "progress_entries" edges to the ModuleProgress entity.
func (ec *EnrollmentCreate) AddProgressEntries(m ...*ModuleProgress) *EnrollmentCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return ec.AddProgressEntryIDs(ids...)
}

// Mutation returns the EnrollmentMutation object of the builder.
func (ec *EnrollmentCreate) Mutation() *EnrollmentMutation {
	return ec.mutation
}

// Save creates the Enrollment in the database.
func (ec *EnrollmentCreate) Save(ctx context.Context) (*Enrollment, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EnrollmentCreate) SaveX(ctx context.Context) *Enrollment {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EnrollmentCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EnrollmentCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EnrollmentCreate) defaults() {
	if _, ok := ec.mutation.Status(); !ok {
		v := enrollment.DefaultStatus
		ec.mutation.SetStatus(v)
	}
	if _, ok := ec.mutation.Progress(); !ok {
		v := enrollment.DefaultProgress
		ec.mutation.SetProgress(v)
	}
	if _, ok := ec.mutation.Metadata(); !ok {
		v := enrollment.DefaultMetadata
		ec.mutation.SetMetadata(v)
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := enrollment.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := enrollment.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := enrollment.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EnrollmentCreate) check() error {
	if _, ok := ec.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "Enrollment.organization_id"`)}
	}
	if _, ok := ec.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course_id", err: errors.New(`ent: missing required field "Enrollment.course_id"`)}
	}
	if _, ok := ec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Enrollment.user_id"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Enrollment.status"`)}
	}
	if _, ok := ec.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "Enrollment.progress"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Enrollment.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Enrollment.updated_at"`)}
	}
	if _, ok := ec.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "Enrollment.organization"`)}
	}
	if _, ok := ec.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course", err: errors.New(`ent: missing required edge "Enrollment.course"`)}
	}
	if _, ok := ec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Enrollment.user"`)}
	}
	return nil
}

func (ec *EnrollmentCreate) sqlSave(ctx context.Context) (*Enrollment, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EnrollmentCreate) createSpec() (*Enrollment, *sqlgraph.CreateSpec) {
	var (
		_node = &Enrollment{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(enrollment.Table, sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(enrollment.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.Progress(); ok {
		_spec.SetField(enrollment.FieldProgress, field.TypeFloat32, value)
		_node.Progress = value
	}
	if value, ok := ec.mutation.StartedAt(); ok {
		_spec.SetField(enrollment.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := ec.mutation.CompletedAt(); ok {
		_spec.SetField(enrollment.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if value, ok := ec.mutation.Metadata(); ok {
		_spec.SetField(enrollment.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(enrollment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(enrollment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ec.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.OrganizationTable,
			Columns: []string{enrollment.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.CourseTable,
			Columns: []string{enrollment.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.UserTable,
			Columns: []string{enrollment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.GroupTable,
			Columns: []string{enrollment.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ProgressEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.ProgressEntriesTable,
			Columns: []string{enrollment.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EnrollmentCreateBulk is the builder for creating many Enrollment entities in bulk.
type EnrollmentCreateBulk struct {
	config
	err      error
	builders []*EnrollmentCreate
}

// Save creates the Enrollment entities in the database.
func (ecb *EnrollmentCreateBulk) Save(ctx context.Context) ([]*Enrollment, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Enrollment, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnrollmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EnrollmentCreateBulk) SaveX(ctx context.Context) []*Enrollment {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EnrollmentCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EnrollmentCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
