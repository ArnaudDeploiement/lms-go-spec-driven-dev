// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-go/internal/ent/course"
	"lms-go/internal/ent/module"
	"lms-go/internal/ent/moduleprogress"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ModuleCreate is the builder for creating a Module entity.
type ModuleCreate struct {
	config
	mutation *ModuleMutation
	hooks    []Hook
}

// SetCourseID sets the "course_id" field.
func (mc *ModuleCreate) SetCourseID(u uuid.UUID) *ModuleCreate {
	mc.mutation.SetCourseID(u)
	return mc
}

// SetContentID sets the "content_id" field.
func (mc *ModuleCreate) SetContentID(u uuid.UUID) *ModuleCreate {
	mc.mutation.SetContentID(u)
	return mc
}

// SetNillableContentID sets the "content_id" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableContentID(u *uuid.UUID) *ModuleCreate {
	if u != nil {
		mc.SetContentID(*u)
	}
	return mc
}

// SetTitle sets the "title" field.
func (mc *ModuleCreate) SetTitle(s string) *ModuleCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetModuleType sets the "module_type" field.
func (mc *ModuleCreate) SetModuleType(s string) *ModuleCreate {
	mc.mutation.SetModuleType(s)
	return mc
}

// SetPosition sets the "position" field.
func (mc *ModuleCreate) SetPosition(i int) *ModuleCreate {
	mc.mutation.SetPosition(i)
	return mc
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (mc *ModuleCreate) SetNillablePosition(i *int) *ModuleCreate {
	if i != nil {
		mc.SetPosition(*i)
	}
	return mc
}

// SetDurationSeconds sets the "duration_seconds" field.
func (mc *ModuleCreate) SetDurationSeconds(i int) *ModuleCreate {
	mc.mutation.SetDurationSeconds(i)
	return mc
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableDurationSeconds(i *int) *ModuleCreate {
	if i != nil {
		mc.SetDurationSeconds(*i)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *ModuleCreate) SetStatus(s string) *ModuleCreate {
	mc.mutation.SetStatus(s)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableStatus(s *string) *ModuleCreate {
	if s != nil {
		mc.SetStatus(*s)
	}
	return mc
}

// SetData sets the "data" field.
func (mc *ModuleCreate) SetData(m map[string]interface{}) *ModuleCreate {
	mc.mutation.SetData(m)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *ModuleCreate) SetCreatedAt(t time.Time) *ModuleCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableCreatedAt(t *time.Time) *ModuleCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *ModuleCreate) SetUpdatedAt(t time.Time) *ModuleCreate {
	mc.mutation.SetUpdatedAt(t)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableUpdatedAt(t *time.Time) *ModuleCreate {
	if t != nil {
		mc.SetUpdatedAt(*t)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *ModuleCreate) SetID(u uuid.UUID) *ModuleCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *ModuleCreate) SetNillableID(u *uuid.UUID) *ModuleCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// SetCourse sets the "course" edge to the Course entity.
func (mc *ModuleCreate) SetCourse(c *Course) *ModuleCreate {
	return mc.SetCourseID(c.ID)
}

// AddProgressEntryIDs adds the "progress_entries" edge to the ModuleProgress entity by IDs.
func (mc *ModuleCreate) AddProgressEntryIDs(ids ...uuid.UUID) *ModuleCreate {
	mc.mutation.AddProgressEntryIDs(ids...)
	return mc
}

// AddProgressEntries adds the "progress_entries" edges to the ModuleProgress entity.
func (mc *ModuleCreate) AddProgressEntries(m ...*ModuleProgress) *ModuleCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddProgressEntryIDs(ids...)
}

// Mutation returns the ModuleMutation object of the builder.
func (mc *ModuleCreate) Mutation() *ModuleMutation {
	return mc.mutation
}

// Save creates the Module in the database.
func (mc *ModuleCreate) Save(ctx context.Context) (*Module, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ModuleCreate) SaveX(ctx context.Context) *Module {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *ModuleCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *ModuleCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *ModuleCreate) defaults() {
	if _, ok := mc.mutation.Position(); !ok {
		v := module.DefaultPosition
		mc.mutation.SetPosition(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := module.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.Data(); !ok {
		v := module.DefaultData
		mc.mutation.SetData(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := module.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := module.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := module.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *ModuleCreate) check() error {
	if _, ok := mc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course_id", err: errors.New(`ent: missing required field "Module.course_id"`)}
	}
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Module.title"`)}
	}
	if v, ok := mc.mutation.Title(); ok {
		if err := module.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Module.title": %w`, err)}
		}
	}
	if _, ok := mc.mutation.ModuleType(); !ok {
		return &ValidationError{Name: "module_type", err: errors.New(`ent: missing required field "Module.module_type"`)}
	}
	if v, ok := mc.mutation.ModuleType(); ok {
		if err := module.ModuleTypeValidator(v); err != nil {
			return &ValidationError{Name: "module_type", err: fmt.Errorf(`ent: validator failed for field "Module.module_type": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "Module.position"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Module.status"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Module.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Module.updated_at"`)}
	}
	if _, ok := mc.mutation.CourseID(); !ok {
		return &ValidationError{Name: "course", err: errors.New(`ent: missing required edge "Module.course"`)}
	}
	return nil
}

func (mc *ModuleCreate) sqlSave(ctx context.Context) (*Module, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *ModuleCreate) createSpec() (*Module, *sqlgraph.CreateSpec) {
	var (
		_node = &Module{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(module.Table, sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.ContentID(); ok {
		_spec.SetField(module.FieldContentID, field.TypeUUID, value)
		_node.ContentID = &value
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(module.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mc.mutation.ModuleType(); ok {
		_spec.SetField(module.FieldModuleType, field.TypeString, value)
		_node.ModuleType = value
	}
	if value, ok := mc.mutation.Position(); ok {
		_spec.SetField(module.FieldPosition, field.TypeInt, value)
		_node.Position = value
	}
	if value, ok := mc.mutation.DurationSeconds(); ok {
		_spec.SetField(module.FieldDurationSeconds, field.TypeInt, value)
		_node.DurationSeconds = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(module.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := mc.mutation.Data(); ok {
		_spec.SetField(module.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(module.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(module.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   module.CourseTable,
			Columns: []string{module.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CourseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ProgressEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ProgressEntriesTable,
			Columns: []string{module.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ModuleCreateBulk is the builder for creating many Module entities in bulk.
type ModuleCreateBulk struct {
	config
	err      error
	builders []*ModuleCreate
}

// Save creates the Module entities in the database.
func (mcb *ModuleCreateBulk) Save(ctx context.Context) ([]*Module, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Module, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *ModuleCreateBulk) SaveX(ctx context.Context) []*Module {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *ModuleCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *ModuleCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
