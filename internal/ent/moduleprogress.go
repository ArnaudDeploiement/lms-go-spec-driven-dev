// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lms-go/internal/ent/enrollment"
	"lms-go/internal/ent/module"
	"lms-go/internal/ent/moduleprogress"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ModuleProgress is the model entity for the ModuleProgress schema.
type ModuleProgress struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EnrollmentID holds the value of the "enrollment_id" field.
	EnrollmentID uuid.UUID `json:"enrollment_id,omitempty"`
	// ModuleID holds the value of the "module_id" field.
	ModuleID uuid.UUID `json:"module_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Score holds the value of the "score" field.
	Score float32 `json:"score,omitempty"`
	// Attempts holds the value of the "attempts" field.
	Attempts int `json:"attempts,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModuleProgressQuery when eager-loading is set.
	Edges        ModuleProgressEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModuleProgressEdges holds the relations/edges for other nodes in the graph.
type ModuleProgressEdges struct {
	// Enrollment holds the value of the enrollment edge.
	Enrollment *Enrollment `json:"enrollment,omitempty"`
	// Module holds the value of the module edge.
	Module *Module `json:"module,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EnrollmentOrErr returns the Enrollment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModuleProgressEdges) EnrollmentOrErr() (*Enrollment, error) {
	if e.Enrollment != nil {
		return e.Enrollment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: enrollment.Label}
	}
	return nil, &NotLoadedError{edge: "enrollment"}
}

// ModuleOrErr returns the Module value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModuleProgressEdges) ModuleOrErr() (*Module, error) {
	if e.Module != nil {
		return e.Module, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: module.Label}
	}
	return nil, &NotLoadedError{edge: "module"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ModuleProgress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case moduleprogress.FieldScore:
			values[i] = new(sql.NullFloat64)
		case moduleprogress.FieldAttempts:
			values[i] = new(sql.NullInt64)
		case moduleprogress.FieldStatus:
			values[i] = new(sql.NullString)
		case moduleprogress.FieldStartedAt, moduleprogress.FieldCompletedAt, moduleprogress.FieldCreatedAt, moduleprogress.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case moduleprogress.FieldID, moduleprogress.FieldEnrollmentID, moduleprogress.FieldModuleID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ModuleProgress fields.
func (mp *ModuleProgress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case moduleprogress.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mp.ID = *value
			}
		case moduleprogress.FieldEnrollmentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field enrollment_id", values[i])
			} else if value != nil {
				mp.EnrollmentID = *value
			}
		case moduleprogress.FieldModuleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field module_id", values[i])
			} else if value != nil {
				mp.ModuleID = *value
			}
		case moduleprogress.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				mp.Status = value.String
			}
		case moduleprogress.FieldScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				mp.Score = float32(value.Float64)
			}
		case moduleprogress.FieldAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempts", values[i])
			} else if value.Valid {
				mp.Attempts = int(value.Int64)
			}
		case moduleprogress.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				mp.StartedAt = new(time.Time)
				*mp.StartedAt = value.Time
			}
		case moduleprogress.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				mp.CompletedAt = new(time.Time)
				*mp.CompletedAt = value.Time
			}
		case moduleprogress.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mp.CreatedAt = value.Time
			}
		case moduleprogress.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mp.UpdatedAt = value.Time
			}
		default:
			mp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ModuleProgress.
// This includes values selected through modifiers, order, etc.
func (mp *ModuleProgress) Value(name string) (ent.Value, error) {
	return mp.selectValues.Get(name)
}

// QueryEnrollment queries the "enrollment" edge of the ModuleProgress entity.
func (mp *ModuleProgress) QueryEnrollment() *EnrollmentQuery {
	return NewModuleProgressClient(mp.config).QueryEnrollment(mp)
}

// QueryModule queries the "module" edge of the ModuleProgress entity.
func (mp *ModuleProgress) QueryModule() *ModuleQuery {
	return NewModuleProgressClient(mp.config).QueryModule(mp)
}

// Update returns a builder for updating this ModuleProgress.
// Note that you need to call ModuleProgress.Unwrap() before calling this method if this ModuleProgress
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *ModuleProgress) Update() *ModuleProgressUpdateOne {
	return NewModuleProgressClient(mp.config).UpdateOne(mp)
}

// Unwrap unwraps the ModuleProgress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mp *ModuleProgress) Unwrap() *ModuleProgress {
	_tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ModuleProgress is not a transactional entity")
	}
	mp.config.driver = _tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *ModuleProgress) String() string {
	var builder strings.Builder
	builder.WriteString("ModuleProgress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mp.ID))
	builder.WriteString("enrollment_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.EnrollmentID))
	builder.WriteString(", ")
	builder.WriteString("module_id=")
	builder.WriteString(fmt.Sprintf("%v", mp.ModuleID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(mp.Status)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", mp.Score))
	builder.WriteString(", ")
	builder.WriteString("attempts=")
	builder.WriteString(fmt.Sprintf("%v", mp.Attempts))
	builder.WriteString(", ")
	if v := mp.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := mp.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(mp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ModuleProgresses is a parsable slice of ModuleProgress.
type ModuleProgresses []*ModuleProgress
