// Code generated by ent, DO NOT EDIT.

package moduleprogress

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the moduleprogress type in the database.
	Label = "module_progress"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEnrollmentID holds the string denoting the enrollment_id field in the database.
	FieldEnrollmentID = "enrollment_id"
	// FieldModuleID holds the string denoting the module_id field in the database.
	FieldModuleID = "module_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldAttempts holds the string denoting the attempts field in the database.
	FieldAttempts = "attempts"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeEnrollment holds the string denoting the enrollment edge name in mutations.
	EdgeEnrollment = "enrollment"
	// EdgeModule holds the string denoting the module edge name in mutations.
	EdgeModule = "module"
	// Table holds the table name of the moduleprogress in the database.
	Table = "module_progresses"
	// EnrollmentTable is the table that holds the enrollment relation/edge.
	EnrollmentTable = "module_progresses"
	// EnrollmentInverseTable is the table name for the Enrollment entity.
	// It exists in this package in order to avoid circular dependency with the "enrollment" package.
	EnrollmentInverseTable = "enrollments"
	// EnrollmentColumn is the table column denoting the enrollment relation/edge.
	EnrollmentColumn = "enrollment_id"
	// ModuleTable is the table that holds the module relation/edge.
	ModuleTable = "module_progresses"
	// ModuleInverseTable is the table name for the Module entity.
	// It exists in this package in order to avoid circular dependency with the "module" package.
	ModuleInverseTable = "modules"
	// ModuleColumn is the table column denoting the module relation/edge.
	ModuleColumn = "module_id"
)

// Columns holds all SQL columns for moduleprogress fields.
var Columns = []string{
	FieldID,
	FieldEnrollmentID,
	FieldModuleID,
	FieldStatus,
	FieldScore,
	FieldAttempts,
	FieldStartedAt,
	FieldCompletedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultAttempts holds the default value on creation for the "attempts" field.
	DefaultAttempts int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ModuleProgress queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEnrollmentID orders the results by the enrollment_id field.
func ByEnrollmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnrollmentID, opts...).ToFunc()
}

// ByModuleID orders the results by the module_id field.
func ByModuleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModuleID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByAttempts orders the results by the attempts field.
func ByAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttempts, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByEnrollmentField orders the results by enrollment field.
func ByEnrollmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEnrollmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByModuleField orders the results by module field.
func ByModuleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModuleStep(), sql.OrderByField(field, opts...))
	}
}
func newEnrollmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EnrollmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EnrollmentTable, EnrollmentColumn),
	)
}
func newModuleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModuleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ModuleTable, ModuleColumn),
	)
}
