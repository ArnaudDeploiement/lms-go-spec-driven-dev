// Code generated by ent, DO NOT EDIT.

package moduleprogress

import (
	"lms-go/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLTE(FieldID, id))
}

// EnrollmentID applies equality check predicate on the "enrollment_id" field. It's identical to EnrollmentIDEQ.
func EnrollmentID(v uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldEnrollmentID, v))
}

// ModuleID applies equality check predicate on the "module_id" field. It's identical to ModuleIDEQ.
func ModuleID(v uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldModuleID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldStatus, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float32) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldScore, v))
}

// Attempts applies equality check predicate on the "attempts" field. It's identical to AttemptsEQ.
func Attempts(v int) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldAttempts, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldStartedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldCompletedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldUpdatedAt, v))
}

// EnrollmentIDEQ applies the EQ predicate on the "enrollment_id" field.
func EnrollmentIDEQ(v uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldEnrollmentID, v))
}

// EnrollmentIDNEQ applies the NEQ predicate on the "enrollment_id" field.
func EnrollmentIDNEQ(v uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNEQ(FieldEnrollmentID, v))
}

// EnrollmentIDIn applies the In predicate on the "enrollment_id" field.
func EnrollmentIDIn(vs ...uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIn(FieldEnrollmentID, vs...))
}

// EnrollmentIDNotIn applies the NotIn predicate on the "enrollment_id" field.
func EnrollmentIDNotIn(vs ...uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotIn(FieldEnrollmentID, vs...))
}

// ModuleIDEQ applies the EQ predicate on the "module_id" field.
func ModuleIDEQ(v uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldModuleID, v))
}

// ModuleIDNEQ applies the NEQ predicate on the "module_id" field.
func ModuleIDNEQ(v uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNEQ(FieldModuleID, v))
}

// ModuleIDIn applies the In predicate on the "module_id" field.
func ModuleIDIn(vs ...uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIn(FieldModuleID, vs...))
}

// ModuleIDNotIn applies the NotIn predicate on the "module_id" field.
func ModuleIDNotIn(vs ...uuid.UUID) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotIn(FieldModuleID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldContainsFold(FieldStatus, v))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float32) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float32) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float32) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float32) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float32) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float32) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float32) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float32) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLTE(FieldScore, v))
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIsNull(FieldScore))
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotNull(FieldScore))
}

// AttemptsEQ applies the EQ predicate on the "attempts" field.
func AttemptsEQ(v int) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldAttempts, v))
}

// AttemptsNEQ applies the NEQ predicate on the "attempts" field.
func AttemptsNEQ(v int) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNEQ(FieldAttempts, v))
}

// AttemptsIn applies the In predicate on the "attempts" field.
func AttemptsIn(vs ...int) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIn(FieldAttempts, vs...))
}

// AttemptsNotIn applies the NotIn predicate on the "attempts" field.
func AttemptsNotIn(vs ...int) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotIn(FieldAttempts, vs...))
}

// AttemptsGT applies the GT predicate on the "attempts" field.
func AttemptsGT(v int) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGT(FieldAttempts, v))
}

// AttemptsGTE applies the GTE predicate on the "attempts" field.
func AttemptsGTE(v int) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGTE(FieldAttempts, v))
}

// AttemptsLT applies the LT predicate on the "attempts" field.
func AttemptsLT(v int) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLT(FieldAttempts, v))
}

// AttemptsLTE applies the LTE predicate on the "attempts" field.
func AttemptsLTE(v int) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLTE(FieldAttempts, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotNull(FieldStartedAt))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotNull(FieldCompletedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasEnrollment applies the HasEdge predicate on the "enrollment" edge.
func HasEnrollment() predicate.ModuleProgress {
	return predicate.ModuleProgress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EnrollmentTable, EnrollmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEnrollmentWith applies the HasEdge predicate on the "enrollment" edge with a given conditions (other predicates).
func HasEnrollmentWith(preds ...predicate.Enrollment) predicate.ModuleProgress {
	return predicate.ModuleProgress(func(s *sql.Selector) {
		step := newEnrollmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModule applies the HasEdge predicate on the "module" edge.
func HasModule() predicate.ModuleProgress {
	return predicate.ModuleProgress(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ModuleTable, ModuleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModuleWith applies the HasEdge predicate on the "module" edge with a given conditions (other predicates).
func HasModuleWith(preds ...predicate.Module) predicate.ModuleProgress {
	return predicate.ModuleProgress(func(s *sql.Selector) {
		step := newModuleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ModuleProgress) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ModuleProgress) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ModuleProgress) predicate.ModuleProgress {
	return predicate.ModuleProgress(sql.NotPredicates(p))
}
