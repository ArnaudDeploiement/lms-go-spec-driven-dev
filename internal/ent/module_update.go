// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-go/internal/ent/course"
	"lms-go/internal/ent/module"
	"lms-go/internal/ent/moduleprogress"
	"lms-go/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ModuleUpdate is the builder for updating Module entities.
type ModuleUpdate struct {
	config
	hooks    []Hook
	mutation *ModuleMutation
}

// Where appends a list predicates to the ModuleUpdate builder.
func (mu *ModuleUpdate) Where(ps ...predicate.Module) *ModuleUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCourseID sets the "course_id" field.
func (mu *ModuleUpdate) SetCourseID(u uuid.UUID) *ModuleUpdate {
	mu.mutation.SetCourseID(u)
	return mu
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableCourseID(u *uuid.UUID) *ModuleUpdate {
	if u != nil {
		mu.SetCourseID(*u)
	}
	return mu
}

// SetContentID sets the "content_id" field.
func (mu *ModuleUpdate) SetContentID(u uuid.UUID) *ModuleUpdate {
	mu.mutation.SetContentID(u)
	return mu
}

// SetNillableContentID sets the "content_id" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableContentID(u *uuid.UUID) *ModuleUpdate {
	if u != nil {
		mu.SetContentID(*u)
	}
	return mu
}

// ClearContentID clears the value of the "content_id" field.
func (mu *ModuleUpdate) ClearContentID() *ModuleUpdate {
	mu.mutation.ClearContentID()
	return mu
}

// SetTitle sets the "title" field.
func (mu *ModuleUpdate) SetTitle(s string) *ModuleUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableTitle(s *string) *ModuleUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// SetModuleType sets the "module_type" field.
func (mu *ModuleUpdate) SetModuleType(s string) *ModuleUpdate {
	mu.mutation.SetModuleType(s)
	return mu
}

// SetNillableModuleType sets the "module_type" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableModuleType(s *string) *ModuleUpdate {
	if s != nil {
		mu.SetModuleType(*s)
	}
	return mu
}

// SetPosition sets the "position" field.
func (mu *ModuleUpdate) SetPosition(i int) *ModuleUpdate {
	mu.mutation.ResetPosition()
	mu.mutation.SetPosition(i)
	return mu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillablePosition(i *int) *ModuleUpdate {
	if i != nil {
		mu.SetPosition(*i)
	}
	return mu
}

// AddPosition adds i to the "position" field.
func (mu *ModuleUpdate) AddPosition(i int) *ModuleUpdate {
	mu.mutation.AddPosition(i)
	return mu
}

// SetDurationSeconds sets the "duration_seconds" field.
func (mu *ModuleUpdate) SetDurationSeconds(i int) *ModuleUpdate {
	mu.mutation.ResetDurationSeconds()
	mu.mutation.SetDurationSeconds(i)
	return mu
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableDurationSeconds(i *int) *ModuleUpdate {
	if i != nil {
		mu.SetDurationSeconds(*i)
	}
	return mu
}

// AddDurationSeconds adds i to the "duration_seconds" field.
func (mu *ModuleUpdate) AddDurationSeconds(i int) *ModuleUpdate {
	mu.mutation.AddDurationSeconds(i)
	return mu
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (mu *ModuleUpdate) ClearDurationSeconds() *ModuleUpdate {
	mu.mutation.ClearDurationSeconds()
	return mu
}

// SetStatus sets the "status" field.
func (mu *ModuleUpdate) SetStatus(s string) *ModuleUpdate {
	mu.mutation.SetStatus(s)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *ModuleUpdate) SetNillableStatus(s *string) *ModuleUpdate {
	if s != nil {
		mu.SetStatus(*s)
	}
	return mu
}

// SetData sets the "data" field.
func (mu *ModuleUpdate) SetData(m map[string]interface{}) *ModuleUpdate {
	mu.mutation.SetData(m)
	return mu
}

// ClearData clears the value of the "data" field.
func (mu *ModuleUpdate) ClearData() *ModuleUpdate {
	mu.mutation.ClearData()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *ModuleUpdate) SetUpdatedAt(t time.Time) *ModuleUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetCourse sets the "course" edge to the Course entity.
func (mu *ModuleUpdate) SetCourse(c *Course) *ModuleUpdate {
	return mu.SetCourseID(c.ID)
}

// AddProgressEntryIDs adds the "progress_entries" edge to the ModuleProgress entity by IDs.
func (mu *ModuleUpdate) AddProgressEntryIDs(ids ...uuid.UUID) *ModuleUpdate {
	mu.mutation.AddProgressEntryIDs(ids...)
	return mu
}

// AddProgressEntries adds the "progress_entries" edges to the ModuleProgress entity.
func (mu *ModuleUpdate) AddProgressEntries(m ...*ModuleProgress) *ModuleUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddProgressEntryIDs(ids...)
}

// Mutation returns the ModuleMutation object of the builder.
func (mu *ModuleUpdate) Mutation() *ModuleMutation {
	return mu.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (mu *ModuleUpdate) ClearCourse() *ModuleUpdate {
	mu.mutation.ClearCourse()
	return mu
}

// ClearProgressEntries clears all "progress_entries" edges to the ModuleProgress entity.
func (mu *ModuleUpdate) ClearProgressEntries() *ModuleUpdate {
	mu.mutation.ClearProgressEntries()
	return mu
}

// RemoveProgressEntryIDs removes the "progress_entries" edge to ModuleProgress entities by IDs.
func (mu *ModuleUpdate) RemoveProgressEntryIDs(ids ...uuid.UUID) *ModuleUpdate {
	mu.mutation.RemoveProgressEntryIDs(ids...)
	return mu
}

// RemoveProgressEntries removes "progress_entries" edges to ModuleProgress entities.
func (mu *ModuleUpdate) RemoveProgressEntries(m ...*ModuleProgress) *ModuleUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveProgressEntryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *ModuleUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *ModuleUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *ModuleUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *ModuleUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *ModuleUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := module.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *ModuleUpdate) check() error {
	if v, ok := mu.mutation.Title(); ok {
		if err := module.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Module.title": %w`, err)}
		}
	}
	if v, ok := mu.mutation.ModuleType(); ok {
		if err := module.ModuleTypeValidator(v); err != nil {
			return &ValidationError{Name: "module_type", err: fmt.Errorf(`ent: validator failed for field "Module.module_type": %w`, err)}
		}
	}
	if _, ok := mu.mutation.CourseID(); mu.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Module.course"`)
	}
	return nil
}

func (mu *ModuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(module.Table, module.Columns, sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.ContentID(); ok {
		_spec.SetField(module.FieldContentID, field.TypeUUID, value)
	}
	if mu.mutation.ContentIDCleared() {
		_spec.ClearField(module.FieldContentID, field.TypeUUID)
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(module.FieldTitle, field.TypeString, value)
	}
	if value, ok := mu.mutation.ModuleType(); ok {
		_spec.SetField(module.FieldModuleType, field.TypeString, value)
	}
	if value, ok := mu.mutation.Position(); ok {
		_spec.SetField(module.FieldPosition, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedPosition(); ok {
		_spec.AddField(module.FieldPosition, field.TypeInt, value)
	}
	if value, ok := mu.mutation.DurationSeconds(); ok {
		_spec.SetField(module.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(module.FieldDurationSeconds, field.TypeInt, value)
	}
	if mu.mutation.DurationSecondsCleared() {
		_spec.ClearField(module.FieldDurationSeconds, field.TypeInt)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(module.FieldStatus, field.TypeString, value)
	}
	if value, ok := mu.mutation.Data(); ok {
		_spec.SetField(module.FieldData, field.TypeJSON, value)
	}
	if mu.mutation.DataCleared() {
		_spec.ClearField(module.FieldData, field.TypeJSON)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(module.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   module.CourseTable,
			Columns: []string{module.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   module.CourseTable,
			Columns: []string{module.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ProgressEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ProgressEntriesTable,
			Columns: []string{module.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedProgressEntriesIDs(); len(nodes) > 0 && !mu.mutation.ProgressEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ProgressEntriesTable,
			Columns: []string{module.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ProgressEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ProgressEntriesTable,
			Columns: []string{module.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{module.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// ModuleUpdateOne is the builder for updating a single Module entity.
type ModuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModuleMutation
}

// SetCourseID sets the "course_id" field.
func (muo *ModuleUpdateOne) SetCourseID(u uuid.UUID) *ModuleUpdateOne {
	muo.mutation.SetCourseID(u)
	return muo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableCourseID(u *uuid.UUID) *ModuleUpdateOne {
	if u != nil {
		muo.SetCourseID(*u)
	}
	return muo
}

// SetContentID sets the "content_id" field.
func (muo *ModuleUpdateOne) SetContentID(u uuid.UUID) *ModuleUpdateOne {
	muo.mutation.SetContentID(u)
	return muo
}

// SetNillableContentID sets the "content_id" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableContentID(u *uuid.UUID) *ModuleUpdateOne {
	if u != nil {
		muo.SetContentID(*u)
	}
	return muo
}

// ClearContentID clears the value of the "content_id" field.
func (muo *ModuleUpdateOne) ClearContentID() *ModuleUpdateOne {
	muo.mutation.ClearContentID()
	return muo
}

// SetTitle sets the "title" field.
func (muo *ModuleUpdateOne) SetTitle(s string) *ModuleUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableTitle(s *string) *ModuleUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// SetModuleType sets the "module_type" field.
func (muo *ModuleUpdateOne) SetModuleType(s string) *ModuleUpdateOne {
	muo.mutation.SetModuleType(s)
	return muo
}

// SetNillableModuleType sets the "module_type" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableModuleType(s *string) *ModuleUpdateOne {
	if s != nil {
		muo.SetModuleType(*s)
	}
	return muo
}

// SetPosition sets the "position" field.
func (muo *ModuleUpdateOne) SetPosition(i int) *ModuleUpdateOne {
	muo.mutation.ResetPosition()
	muo.mutation.SetPosition(i)
	return muo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillablePosition(i *int) *ModuleUpdateOne {
	if i != nil {
		muo.SetPosition(*i)
	}
	return muo
}

// AddPosition adds i to the "position" field.
func (muo *ModuleUpdateOne) AddPosition(i int) *ModuleUpdateOne {
	muo.mutation.AddPosition(i)
	return muo
}

// SetDurationSeconds sets the "duration_seconds" field.
func (muo *ModuleUpdateOne) SetDurationSeconds(i int) *ModuleUpdateOne {
	muo.mutation.ResetDurationSeconds()
	muo.mutation.SetDurationSeconds(i)
	return muo
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableDurationSeconds(i *int) *ModuleUpdateOne {
	if i != nil {
		muo.SetDurationSeconds(*i)
	}
	return muo
}

// AddDurationSeconds adds i to the "duration_seconds" field.
func (muo *ModuleUpdateOne) AddDurationSeconds(i int) *ModuleUpdateOne {
	muo.mutation.AddDurationSeconds(i)
	return muo
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (muo *ModuleUpdateOne) ClearDurationSeconds() *ModuleUpdateOne {
	muo.mutation.ClearDurationSeconds()
	return muo
}

// SetStatus sets the "status" field.
func (muo *ModuleUpdateOne) SetStatus(s string) *ModuleUpdateOne {
	muo.mutation.SetStatus(s)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *ModuleUpdateOne) SetNillableStatus(s *string) *ModuleUpdateOne {
	if s != nil {
		muo.SetStatus(*s)
	}
	return muo
}

// SetData sets the "data" field.
func (muo *ModuleUpdateOne) SetData(m map[string]interface{}) *ModuleUpdateOne {
	muo.mutation.SetData(m)
	return muo
}

// ClearData clears the value of the "data" field.
func (muo *ModuleUpdateOne) ClearData() *ModuleUpdateOne {
	muo.mutation.ClearData()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *ModuleUpdateOne) SetUpdatedAt(t time.Time) *ModuleUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetCourse sets the "course" edge to the Course entity.
func (muo *ModuleUpdateOne) SetCourse(c *Course) *ModuleUpdateOne {
	return muo.SetCourseID(c.ID)
}

// AddProgressEntryIDs adds the "progress_entries" edge to the ModuleProgress entity by IDs.
func (muo *ModuleUpdateOne) AddProgressEntryIDs(ids ...uuid.UUID) *ModuleUpdateOne {
	muo.mutation.AddProgressEntryIDs(ids...)
	return muo
}

// AddProgressEntries adds the "progress_entries" edges to the ModuleProgress entity.
func (muo *ModuleUpdateOne) AddProgressEntries(m ...*ModuleProgress) *ModuleUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddProgressEntryIDs(ids...)
}

// Mutation returns the ModuleMutation object of the builder.
func (muo *ModuleUpdateOne) Mutation() *ModuleMutation {
	return muo.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (muo *ModuleUpdateOne) ClearCourse() *ModuleUpdateOne {
	muo.mutation.ClearCourse()
	return muo
}

// ClearProgressEntries clears all "progress_entries" edges to the ModuleProgress entity.
func (muo *ModuleUpdateOne) ClearProgressEntries() *ModuleUpdateOne {
	muo.mutation.ClearProgressEntries()
	return muo
}

// RemoveProgressEntryIDs removes the "progress_entries" edge to ModuleProgress entities by IDs.
func (muo *ModuleUpdateOne) RemoveProgressEntryIDs(ids ...uuid.UUID) *ModuleUpdateOne {
	muo.mutation.RemoveProgressEntryIDs(ids...)
	return muo
}

// RemoveProgressEntries removes "progress_entries" edges to ModuleProgress entities.
func (muo *ModuleUpdateOne) RemoveProgressEntries(m ...*ModuleProgress) *ModuleUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveProgressEntryIDs(ids...)
}

// Where appends a list predicates to the ModuleUpdate builder.
func (muo *ModuleUpdateOne) Where(ps ...predicate.Module) *ModuleUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *ModuleUpdateOne) Select(field string, fields ...string) *ModuleUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Module entity.
func (muo *ModuleUpdateOne) Save(ctx context.Context) (*Module, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *ModuleUpdateOne) SaveX(ctx context.Context) *Module {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *ModuleUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *ModuleUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *ModuleUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := module.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *ModuleUpdateOne) check() error {
	if v, ok := muo.mutation.Title(); ok {
		if err := module.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Module.title": %w`, err)}
		}
	}
	if v, ok := muo.mutation.ModuleType(); ok {
		if err := module.ModuleTypeValidator(v); err != nil {
			return &ValidationError{Name: "module_type", err: fmt.Errorf(`ent: validator failed for field "Module.module_type": %w`, err)}
		}
	}
	if _, ok := muo.mutation.CourseID(); muo.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Module.course"`)
	}
	return nil
}

func (muo *ModuleUpdateOne) sqlSave(ctx context.Context) (_node *Module, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(module.Table, module.Columns, sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Module.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, module.FieldID)
		for _, f := range fields {
			if !module.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != module.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.ContentID(); ok {
		_spec.SetField(module.FieldContentID, field.TypeUUID, value)
	}
	if muo.mutation.ContentIDCleared() {
		_spec.ClearField(module.FieldContentID, field.TypeUUID)
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(module.FieldTitle, field.TypeString, value)
	}
	if value, ok := muo.mutation.ModuleType(); ok {
		_spec.SetField(module.FieldModuleType, field.TypeString, value)
	}
	if value, ok := muo.mutation.Position(); ok {
		_spec.SetField(module.FieldPosition, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedPosition(); ok {
		_spec.AddField(module.FieldPosition, field.TypeInt, value)
	}
	if value, ok := muo.mutation.DurationSeconds(); ok {
		_spec.SetField(module.FieldDurationSeconds, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(module.FieldDurationSeconds, field.TypeInt, value)
	}
	if muo.mutation.DurationSecondsCleared() {
		_spec.ClearField(module.FieldDurationSeconds, field.TypeInt)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(module.FieldStatus, field.TypeString, value)
	}
	if value, ok := muo.mutation.Data(); ok {
		_spec.SetField(module.FieldData, field.TypeJSON, value)
	}
	if muo.mutation.DataCleared() {
		_spec.ClearField(module.FieldData, field.TypeJSON)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(module.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   module.CourseTable,
			Columns: []string{module.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   module.CourseTable,
			Columns: []string{module.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ProgressEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ProgressEntriesTable,
			Columns: []string{module.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedProgressEntriesIDs(); len(nodes) > 0 && !muo.mutation.ProgressEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ProgressEntriesTable,
			Columns: []string{module.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ProgressEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   module.ProgressEntriesTable,
			Columns: []string{module.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Module{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{module.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
