// Code generated by ent, DO NOT EDIT.

package content

import (
	"lms-go/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldID, id))
}

// OrganizationID applies equality check predicate on the "organization_id" field. It's identical to OrganizationIDEQ.
func OrganizationID(v uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldOrganizationID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldName, v))
}

// MimeType applies equality check predicate on the "mime_type" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldMimeType, v))
}

// SizeBytes applies equality check predicate on the "size_bytes" field. It's identical to SizeBytesEQ.
func SizeBytes(v int64) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldSizeBytes, v))
}

// StorageKey applies equality check predicate on the "storage_key" field. It's identical to StorageKeyEQ.
func StorageKey(v string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldStorageKey, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldUpdatedAt, v))
}

// OrganizationIDEQ applies the EQ predicate on the "organization_id" field.
func OrganizationIDEQ(v uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldOrganizationID, v))
}

// OrganizationIDNEQ applies the NEQ predicate on the "organization_id" field.
func OrganizationIDNEQ(v uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldOrganizationID, v))
}

// OrganizationIDIn applies the In predicate on the "organization_id" field.
func OrganizationIDIn(vs ...uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldOrganizationID, vs...))
}

// OrganizationIDNotIn applies the NotIn predicate on the "organization_id" field.
func OrganizationIDNotIn(vs ...uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldOrganizationID, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Content {
	return predicate.Content(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Content {
	return predicate.Content(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Content {
	return predicate.Content(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Content {
	return predicate.Content(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Content {
	return predicate.Content(sql.FieldContainsFold(FieldName, v))
}

// MimeTypeEQ applies the EQ predicate on the "mime_type" field.
func MimeTypeEQ(v string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mime_type" field.
func MimeTypeNEQ(v string) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mime_type" field.
func MimeTypeIn(vs ...string) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mime_type" field.
func MimeTypeNotIn(vs ...string) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mime_type" field.
func MimeTypeGT(v string) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mime_type" field.
func MimeTypeGTE(v string) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mime_type" field.
func MimeTypeLT(v string) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mime_type" field.
func MimeTypeLTE(v string) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mime_type" field.
func MimeTypeContains(v string) predicate.Content {
	return predicate.Content(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mime_type" field.
func MimeTypeHasPrefix(v string) predicate.Content {
	return predicate.Content(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mime_type" field.
func MimeTypeHasSuffix(v string) predicate.Content {
	return predicate.Content(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mime_type" field.
func MimeTypeEqualFold(v string) predicate.Content {
	return predicate.Content(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mime_type" field.
func MimeTypeContainsFold(v string) predicate.Content {
	return predicate.Content(sql.FieldContainsFold(FieldMimeType, v))
}

// SizeBytesEQ applies the EQ predicate on the "size_bytes" field.
func SizeBytesEQ(v int64) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldSizeBytes, v))
}

// SizeBytesNEQ applies the NEQ predicate on the "size_bytes" field.
func SizeBytesNEQ(v int64) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldSizeBytes, v))
}

// SizeBytesIn applies the In predicate on the "size_bytes" field.
func SizeBytesIn(vs ...int64) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldSizeBytes, vs...))
}

// SizeBytesNotIn applies the NotIn predicate on the "size_bytes" field.
func SizeBytesNotIn(vs ...int64) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldSizeBytes, vs...))
}

// SizeBytesGT applies the GT predicate on the "size_bytes" field.
func SizeBytesGT(v int64) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldSizeBytes, v))
}

// SizeBytesGTE applies the GTE predicate on the "size_bytes" field.
func SizeBytesGTE(v int64) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldSizeBytes, v))
}

// SizeBytesLT applies the LT predicate on the "size_bytes" field.
func SizeBytesLT(v int64) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldSizeBytes, v))
}

// SizeBytesLTE applies the LTE predicate on the "size_bytes" field.
func SizeBytesLTE(v int64) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldSizeBytes, v))
}

// SizeBytesIsNil applies the IsNil predicate on the "size_bytes" field.
func SizeBytesIsNil() predicate.Content {
	return predicate.Content(sql.FieldIsNull(FieldSizeBytes))
}

// SizeBytesNotNil applies the NotNil predicate on the "size_bytes" field.
func SizeBytesNotNil() predicate.Content {
	return predicate.Content(sql.FieldNotNull(FieldSizeBytes))
}

// StorageKeyEQ applies the EQ predicate on the "storage_key" field.
func StorageKeyEQ(v string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldStorageKey, v))
}

// StorageKeyNEQ applies the NEQ predicate on the "storage_key" field.
func StorageKeyNEQ(v string) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldStorageKey, v))
}

// StorageKeyIn applies the In predicate on the "storage_key" field.
func StorageKeyIn(vs ...string) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldStorageKey, vs...))
}

// StorageKeyNotIn applies the NotIn predicate on the "storage_key" field.
func StorageKeyNotIn(vs ...string) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldStorageKey, vs...))
}

// StorageKeyGT applies the GT predicate on the "storage_key" field.
func StorageKeyGT(v string) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldStorageKey, v))
}

// StorageKeyGTE applies the GTE predicate on the "storage_key" field.
func StorageKeyGTE(v string) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldStorageKey, v))
}

// StorageKeyLT applies the LT predicate on the "storage_key" field.
func StorageKeyLT(v string) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldStorageKey, v))
}

// StorageKeyLTE applies the LTE predicate on the "storage_key" field.
func StorageKeyLTE(v string) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldStorageKey, v))
}

// StorageKeyContains applies the Contains predicate on the "storage_key" field.
func StorageKeyContains(v string) predicate.Content {
	return predicate.Content(sql.FieldContains(FieldStorageKey, v))
}

// StorageKeyHasPrefix applies the HasPrefix predicate on the "storage_key" field.
func StorageKeyHasPrefix(v string) predicate.Content {
	return predicate.Content(sql.FieldHasPrefix(FieldStorageKey, v))
}

// StorageKeyHasSuffix applies the HasSuffix predicate on the "storage_key" field.
func StorageKeyHasSuffix(v string) predicate.Content {
	return predicate.Content(sql.FieldHasSuffix(FieldStorageKey, v))
}

// StorageKeyEqualFold applies the EqualFold predicate on the "storage_key" field.
func StorageKeyEqualFold(v string) predicate.Content {
	return predicate.Content(sql.FieldEqualFold(FieldStorageKey, v))
}

// StorageKeyContainsFold applies the ContainsFold predicate on the "storage_key" field.
func StorageKeyContainsFold(v string) predicate.Content {
	return predicate.Content(sql.FieldContainsFold(FieldStorageKey, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Content {
	return predicate.Content(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Content {
	return predicate.Content(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Content {
	return predicate.Content(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Content {
	return predicate.Content(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Content {
	return predicate.Content(sql.FieldContainsFold(FieldStatus, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Content {
	return predicate.Content(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Content {
	return predicate.Content(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Content) predicate.Content {
	return predicate.Content(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Content) predicate.Content {
	return predicate.Content(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Content) predicate.Content {
	return predicate.Content(sql.NotPredicates(p))
}
