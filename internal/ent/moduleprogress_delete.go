// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"lms-go/internal/ent/moduleprogress"
	"lms-go/internal/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ModuleProgressDelete is the builder for deleting a ModuleProgress entity.
type ModuleProgressDelete struct {
	config
	hooks    []Hook
	mutation *ModuleProgressMutation
}

// Where appends a list predicates to the ModuleProgressDelete builder.
func (mpd *ModuleProgressDelete) Where(ps ...predicate.ModuleProgress) *ModuleProgressDelete {
	mpd.mutation.Where(ps...)
	return mpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mpd *ModuleProgressDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mpd.sqlExec, mpd.mutation, mpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mpd *ModuleProgressDelete) ExecX(ctx context.Context) int {
	n, err := mpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mpd *ModuleProgressDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(moduleprogress.Table, sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID))
	if ps := mpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mpd.mutation.done = true
	return affected, err
}

// ModuleProgressDeleteOne is the builder for deleting a single ModuleProgress entity.
type ModuleProgressDeleteOne struct {
	mpd *ModuleProgressDelete
}

// Where appends a list predicates to the ModuleProgressDelete builder.
func (mpdo *ModuleProgressDeleteOne) Where(ps ...predicate.ModuleProgress) *ModuleProgressDeleteOne {
	mpdo.mpd.mutation.Where(ps...)
	return mpdo
}

// Exec executes the deletion query.
func (mpdo *ModuleProgressDeleteOne) Exec(ctx context.Context) error {
	n, err := mpdo.mpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{moduleprogress.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mpdo *ModuleProgressDeleteOne) ExecX(ctx context.Context) {
	if err := mpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
