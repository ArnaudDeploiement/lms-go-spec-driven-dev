// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"lms-go/internal/ent/enrollment"
	"lms-go/internal/ent/module"
	"lms-go/internal/ent/moduleprogress"
	"lms-go/internal/ent/predicate"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ModuleProgressQuery is the builder for querying ModuleProgress entities.
type ModuleProgressQuery struct {
	config
	ctx            *QueryContext
	order          []moduleprogress.OrderOption
	inters         []Interceptor
	predicates     []predicate.ModuleProgress
	withEnrollment *EnrollmentQuery
	withModule     *ModuleQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ModuleProgressQuery builder.
func (mpq *ModuleProgressQuery) Where(ps ...predicate.ModuleProgress) *ModuleProgressQuery {
	mpq.predicates = append(mpq.predicates, ps...)
	return mpq
}

// Limit the number of records to be returned by this query.
func (mpq *ModuleProgressQuery) Limit(limit int) *ModuleProgressQuery {
	mpq.ctx.Limit = &limit
	return mpq
}

// Offset to start from.
func (mpq *ModuleProgressQuery) Offset(offset int) *ModuleProgressQuery {
	mpq.ctx.Offset = &offset
	return mpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mpq *ModuleProgressQuery) Unique(unique bool) *ModuleProgressQuery {
	mpq.ctx.Unique = &unique
	return mpq
}

// Order specifies how the records should be ordered.
func (mpq *ModuleProgressQuery) Order(o ...moduleprogress.OrderOption) *ModuleProgressQuery {
	mpq.order = append(mpq.order, o...)
	return mpq
}

// QueryEnrollment chains the current query on the "enrollment" edge.
func (mpq *ModuleProgressQuery) QueryEnrollment() *EnrollmentQuery {
	query := (&EnrollmentClient{config: mpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(moduleprogress.Table, moduleprogress.FieldID, selector),
			sqlgraph.To(enrollment.Table, enrollment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, moduleprogress.EnrollmentTable, moduleprogress.EnrollmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(mpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryModule chains the current query on the "module" edge.
func (mpq *ModuleProgressQuery) QueryModule() *ModuleQuery {
	query := (&ModuleClient{config: mpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(moduleprogress.Table, moduleprogress.FieldID, selector),
			sqlgraph.To(module.Table, module.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, moduleprogress.ModuleTable, moduleprogress.ModuleColumn),
		)
		fromU = sqlgraph.SetNeighbors(mpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ModuleProgress entity from the query.
// Returns a *NotFoundError when no ModuleProgress was found.
func (mpq *ModuleProgressQuery) First(ctx context.Context) (*ModuleProgress, error) {
	nodes, err := mpq.Limit(1).All(setContextOp(ctx, mpq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{moduleprogress.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mpq *ModuleProgressQuery) FirstX(ctx context.Context) *ModuleProgress {
	node, err := mpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ModuleProgress ID from the query.
// Returns a *NotFoundError when no ModuleProgress ID was found.
func (mpq *ModuleProgressQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = mpq.Limit(1).IDs(setContextOp(ctx, mpq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{moduleprogress.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mpq *ModuleProgressQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := mpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ModuleProgress entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ModuleProgress entity is found.
// Returns a *NotFoundError when no ModuleProgress entities are found.
func (mpq *ModuleProgressQuery) Only(ctx context.Context) (*ModuleProgress, error) {
	nodes, err := mpq.Limit(2).All(setContextOp(ctx, mpq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{moduleprogress.Label}
	default:
		return nil, &NotSingularError{moduleprogress.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mpq *ModuleProgressQuery) OnlyX(ctx context.Context) *ModuleProgress {
	node, err := mpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ModuleProgress ID in the query.
// Returns a *NotSingularError when more than one ModuleProgress ID is found.
// Returns a *NotFoundError when no entities are found.
func (mpq *ModuleProgressQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = mpq.Limit(2).IDs(setContextOp(ctx, mpq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{moduleprogress.Label}
	default:
		err = &NotSingularError{moduleprogress.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mpq *ModuleProgressQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := mpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ModuleProgresses.
func (mpq *ModuleProgressQuery) All(ctx context.Context) ([]*ModuleProgress, error) {
	ctx = setContextOp(ctx, mpq.ctx, "All")
	if err := mpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ModuleProgress, *ModuleProgressQuery]()
	return withInterceptors[[]*ModuleProgress](ctx, mpq, qr, mpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mpq *ModuleProgressQuery) AllX(ctx context.Context) []*ModuleProgress {
	nodes, err := mpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ModuleProgress IDs.
func (mpq *ModuleProgressQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if mpq.ctx.Unique == nil && mpq.path != nil {
		mpq.Unique(true)
	}
	ctx = setContextOp(ctx, mpq.ctx, "IDs")
	if err = mpq.Select(moduleprogress.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mpq *ModuleProgressQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := mpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mpq *ModuleProgressQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mpq.ctx, "Count")
	if err := mpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mpq, querierCount[*ModuleProgressQuery](), mpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mpq *ModuleProgressQuery) CountX(ctx context.Context) int {
	count, err := mpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mpq *ModuleProgressQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mpq.ctx, "Exist")
	switch _, err := mpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mpq *ModuleProgressQuery) ExistX(ctx context.Context) bool {
	exist, err := mpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ModuleProgressQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mpq *ModuleProgressQuery) Clone() *ModuleProgressQuery {
	if mpq == nil {
		return nil
	}
	return &ModuleProgressQuery{
		config:         mpq.config,
		ctx:            mpq.ctx.Clone(),
		order:          append([]moduleprogress.OrderOption{}, mpq.order...),
		inters:         append([]Interceptor{}, mpq.inters...),
		predicates:     append([]predicate.ModuleProgress{}, mpq.predicates...),
		withEnrollment: mpq.withEnrollment.Clone(),
		withModule:     mpq.withModule.Clone(),
		// clone intermediate query.
		sql:  mpq.sql.Clone(),
		path: mpq.path,
	}
}

// WithEnrollment tells the query-builder to eager-load the nodes that are connected to
// the "enrollment" edge. The optional arguments are used to configure the query builder of the edge.
func (mpq *ModuleProgressQuery) WithEnrollment(opts ...func(*EnrollmentQuery)) *ModuleProgressQuery {
	query := (&EnrollmentClient{config: mpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mpq.withEnrollment = query
	return mpq
}

// WithModule tells the query-builder to eager-load the nodes that are connected to
// the "module" edge. The optional arguments are used to configure the query builder of the edge.
func (mpq *ModuleProgressQuery) WithModule(opts ...func(*ModuleQuery)) *ModuleProgressQuery {
	query := (&ModuleClient{config: mpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mpq.withModule = query
	return mpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		EnrollmentID uuid.UUID `json:"enrollment_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ModuleProgress.Query().
//		GroupBy(moduleprogress.FieldEnrollmentID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mpq *ModuleProgressQuery) GroupBy(field string, fields ...string) *ModuleProgressGroupBy {
	mpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ModuleProgressGroupBy{build: mpq}
	grbuild.flds = &mpq.ctx.Fields
	grbuild.label = moduleprogress.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		EnrollmentID uuid.UUID `json:"enrollment_id,omitempty"`
//	}
//
//	client.ModuleProgress.Query().
//		Select(moduleprogress.FieldEnrollmentID).
//		Scan(ctx, &v)
func (mpq *ModuleProgressQuery) Select(fields ...string) *ModuleProgressSelect {
	mpq.ctx.Fields = append(mpq.ctx.Fields, fields...)
	sbuild := &ModuleProgressSelect{ModuleProgressQuery: mpq}
	sbuild.label = moduleprogress.Label
	sbuild.flds, sbuild.scan = &mpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ModuleProgressSelect configured with the given aggregations.
func (mpq *ModuleProgressQuery) Aggregate(fns ...AggregateFunc) *ModuleProgressSelect {
	return mpq.Select().Aggregate(fns...)
}

func (mpq *ModuleProgressQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mpq); err != nil {
				return err
			}
		}
	}
	for _, f := range mpq.ctx.Fields {
		if !moduleprogress.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mpq.path != nil {
		prev, err := mpq.path(ctx)
		if err != nil {
			return err
		}
		mpq.sql = prev
	}
	return nil
}

func (mpq *ModuleProgressQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ModuleProgress, error) {
	var (
		nodes       = []*ModuleProgress{}
		_spec       = mpq.querySpec()
		loadedTypes = [2]bool{
			mpq.withEnrollment != nil,
			mpq.withModule != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ModuleProgress).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ModuleProgress{config: mpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mpq.withEnrollment; query != nil {
		if err := mpq.loadEnrollment(ctx, query, nodes, nil,
			func(n *ModuleProgress, e *Enrollment) { n.Edges.Enrollment = e }); err != nil {
			return nil, err
		}
	}
	if query := mpq.withModule; query != nil {
		if err := mpq.loadModule(ctx, query, nodes, nil,
			func(n *ModuleProgress, e *Module) { n.Edges.Module = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (mpq *ModuleProgressQuery) loadEnrollment(ctx context.Context, query *EnrollmentQuery, nodes []*ModuleProgress, init func(*ModuleProgress), assign func(*ModuleProgress, *Enrollment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ModuleProgress)
	for i := range nodes {
		fk := nodes[i].EnrollmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(enrollment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "enrollment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (mpq *ModuleProgressQuery) loadModule(ctx context.Context, query *ModuleQuery, nodes []*ModuleProgress, init func(*ModuleProgress), assign func(*ModuleProgress, *Module)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ModuleProgress)
	for i := range nodes {
		fk := nodes[i].ModuleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(module.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "module_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mpq *ModuleProgressQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mpq.querySpec()
	_spec.Node.Columns = mpq.ctx.Fields
	if len(mpq.ctx.Fields) > 0 {
		_spec.Unique = mpq.ctx.Unique != nil && *mpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mpq.driver, _spec)
}

func (mpq *ModuleProgressQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(moduleprogress.Table, moduleprogress.Columns, sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID))
	_spec.From = mpq.sql
	if unique := mpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mpq.path != nil {
		_spec.Unique = true
	}
	if fields := mpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moduleprogress.FieldID)
		for i := range fields {
			if fields[i] != moduleprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mpq.withEnrollment != nil {
			_spec.Node.AddColumnOnce(moduleprogress.FieldEnrollmentID)
		}
		if mpq.withModule != nil {
			_spec.Node.AddColumnOnce(moduleprogress.FieldModuleID)
		}
	}
	if ps := mpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mpq *ModuleProgressQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mpq.driver.Dialect())
	t1 := builder.Table(moduleprogress.Table)
	columns := mpq.ctx.Fields
	if len(columns) == 0 {
		columns = moduleprogress.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mpq.sql != nil {
		selector = mpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mpq.ctx.Unique != nil && *mpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range mpq.predicates {
		p(selector)
	}
	for _, p := range mpq.order {
		p(selector)
	}
	if offset := mpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ModuleProgressGroupBy is the group-by builder for ModuleProgress entities.
type ModuleProgressGroupBy struct {
	selector
	build *ModuleProgressQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mpgb *ModuleProgressGroupBy) Aggregate(fns ...AggregateFunc) *ModuleProgressGroupBy {
	mpgb.fns = append(mpgb.fns, fns...)
	return mpgb
}

// Scan applies the selector query and scans the result into the given value.
func (mpgb *ModuleProgressGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mpgb.build.ctx, "GroupBy")
	if err := mpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ModuleProgressQuery, *ModuleProgressGroupBy](ctx, mpgb.build, mpgb, mpgb.build.inters, v)
}

func (mpgb *ModuleProgressGroupBy) sqlScan(ctx context.Context, root *ModuleProgressQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mpgb.fns))
	for _, fn := range mpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mpgb.flds)+len(mpgb.fns))
		for _, f := range *mpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ModuleProgressSelect is the builder for selecting fields of ModuleProgress entities.
type ModuleProgressSelect struct {
	*ModuleProgressQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (mps *ModuleProgressSelect) Aggregate(fns ...AggregateFunc) *ModuleProgressSelect {
	mps.fns = append(mps.fns, fns...)
	return mps
}

// Scan applies the selector query and scans the result into the given value.
func (mps *ModuleProgressSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mps.ctx, "Select")
	if err := mps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ModuleProgressQuery, *ModuleProgressSelect](ctx, mps.ModuleProgressQuery, mps, mps.inters, v)
}

func (mps *ModuleProgressSelect) sqlScan(ctx context.Context, root *ModuleProgressQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(mps.fns))
	for _, fn := range mps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*mps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
