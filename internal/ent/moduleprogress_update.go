// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-go/internal/ent/enrollment"
	"lms-go/internal/ent/module"
	"lms-go/internal/ent/moduleprogress"
	"lms-go/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ModuleProgressUpdate is the builder for updating ModuleProgress entities.
type ModuleProgressUpdate struct {
	config
	hooks    []Hook
	mutation *ModuleProgressMutation
}

// Where appends a list predicates to the ModuleProgressUpdate builder.
func (mpu *ModuleProgressUpdate) Where(ps ...predicate.ModuleProgress) *ModuleProgressUpdate {
	mpu.mutation.Where(ps...)
	return mpu
}

// SetEnrollmentID sets the "enrollment_id" field.
func (mpu *ModuleProgressUpdate) SetEnrollmentID(u uuid.UUID) *ModuleProgressUpdate {
	mpu.mutation.SetEnrollmentID(u)
	return mpu
}

// SetNillableEnrollmentID sets the "enrollment_id" field if the given value is not nil.
func (mpu *ModuleProgressUpdate) SetNillableEnrollmentID(u *uuid.UUID) *ModuleProgressUpdate {
	if u != nil {
		mpu.SetEnrollmentID(*u)
	}
	return mpu
}

// SetModuleID sets the "module_id" field.
func (mpu *ModuleProgressUpdate) SetModuleID(u uuid.UUID) *ModuleProgressUpdate {
	mpu.mutation.SetModuleID(u)
	return mpu
}

// SetNillableModuleID sets the "module_id" field if the given value is not nil.
func (mpu *ModuleProgressUpdate) SetNillableModuleID(u *uuid.UUID) *ModuleProgressUpdate {
	if u != nil {
		mpu.SetModuleID(*u)
	}
	return mpu
}

// SetStatus sets the "status" field.
func (mpu *ModuleProgressUpdate) SetStatus(s string) *ModuleProgressUpdate {
	mpu.mutation.SetStatus(s)
	return mpu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpu *ModuleProgressUpdate) SetNillableStatus(s *string) *ModuleProgressUpdate {
	if s != nil {
		mpu.SetStatus(*s)
	}
	return mpu
}

// SetScore sets the "score" field.
func (mpu *ModuleProgressUpdate) SetScore(f float32) *ModuleProgressUpdate {
	mpu.mutation.ResetScore()
	mpu.mutation.SetScore(f)
	return mpu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (mpu *ModuleProgressUpdate) SetNillableScore(f *float32) *ModuleProgressUpdate {
	if f != nil {
		mpu.SetScore(*f)
	}
	return mpu
}

// AddScore adds f to the "score" field.
func (mpu *ModuleProgressUpdate) AddScore(f float32) *ModuleProgressUpdate {
	mpu.mutation.AddScore(f)
	return mpu
}

// ClearScore clears the value of the "score" field.
func (mpu *ModuleProgressUpdate) ClearScore() *ModuleProgressUpdate {
	mpu.mutation.ClearScore()
	return mpu
}

// SetAttempts sets the "attempts" field.
func (mpu *ModuleProgressUpdate) SetAttempts(i int) *ModuleProgressUpdate {
	mpu.mutation.ResetAttempts()
	mpu.mutation.SetAttempts(i)
	return mpu
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (mpu *ModuleProgressUpdate) SetNillableAttempts(i *int) *ModuleProgressUpdate {
	if i != nil {
		mpu.SetAttempts(*i)
	}
	return mpu
}

// AddAttempts adds i to the "attempts" field.
func (mpu *ModuleProgressUpdate) AddAttempts(i int) *ModuleProgressUpdate {
	mpu.mutation.AddAttempts(i)
	return mpu
}

// SetStartedAt sets the "started_at" field.
func (mpu *ModuleProgressUpdate) SetStartedAt(t time.Time) *ModuleProgressUpdate {
	mpu.mutation.SetStartedAt(t)
	return mpu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mpu *ModuleProgressUpdate) SetNillableStartedAt(t *time.Time) *ModuleProgressUpdate {
	if t != nil {
		mpu.SetStartedAt(*t)
	}
	return mpu
}

// ClearStartedAt clears the value of the "started_at" field.
func (mpu *ModuleProgressUpdate) ClearStartedAt() *ModuleProgressUpdate {
	mpu.mutation.ClearStartedAt()
	return mpu
}

// SetCompletedAt sets the "completed_at" field.
func (mpu *ModuleProgressUpdate) SetCompletedAt(t time.Time) *ModuleProgressUpdate {
	mpu.mutation.SetCompletedAt(t)
	return mpu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (mpu *ModuleProgressUpdate) SetNillableCompletedAt(t *time.Time) *ModuleProgressUpdate {
	if t != nil {
		mpu.SetCompletedAt(*t)
	}
	return mpu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (mpu *ModuleProgressUpdate) ClearCompletedAt() *ModuleProgressUpdate {
	mpu.mutation.ClearCompletedAt()
	return mpu
}

// SetUpdatedAt sets the "updated_at" field.
func (mpu *ModuleProgressUpdate) SetUpdatedAt(t time.Time) *ModuleProgressUpdate {
	mpu.mutation.SetUpdatedAt(t)
	return mpu
}

// SetEnrollment sets the "enrollment" edge to the Enrollment entity.
func (mpu *ModuleProgressUpdate) SetEnrollment(e *Enrollment) *ModuleProgressUpdate {
	return mpu.SetEnrollmentID(e.ID)
}

// SetModule sets the "module" edge to the Module entity.
func (mpu *ModuleProgressUpdate) SetModule(m *Module) *ModuleProgressUpdate {
	return mpu.SetModuleID(m.ID)
}

// Mutation returns the ModuleProgressMutation object of the builder.
func (mpu *ModuleProgressUpdate) Mutation() *ModuleProgressMutation {
	return mpu.mutation
}

// ClearEnrollment clears the "enrollment" edge to the Enrollment entity.
func (mpu *ModuleProgressUpdate) ClearEnrollment() *ModuleProgressUpdate {
	mpu.mutation.ClearEnrollment()
	return mpu
}

// ClearModule clears the "module" edge to the Module entity.
func (mpu *ModuleProgressUpdate) ClearModule() *ModuleProgressUpdate {
	mpu.mutation.ClearModule()
	return mpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *ModuleProgressUpdate) Save(ctx context.Context) (int, error) {
	mpu.defaults()
	return withHooks(ctx, mpu.sqlSave, mpu.mutation, mpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *ModuleProgressUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *ModuleProgressUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *ModuleProgressUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpu *ModuleProgressUpdate) defaults() {
	if _, ok := mpu.mutation.UpdatedAt(); !ok {
		v := moduleprogress.UpdateDefaultUpdatedAt()
		mpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpu *ModuleProgressUpdate) check() error {
	if _, ok := mpu.mutation.EnrollmentID(); mpu.mutation.EnrollmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ModuleProgress.enrollment"`)
	}
	if _, ok := mpu.mutation.ModuleID(); mpu.mutation.ModuleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ModuleProgress.module"`)
	}
	return nil
}

func (mpu *ModuleProgressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(moduleprogress.Table, moduleprogress.Columns, sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID))
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpu.mutation.Status(); ok {
		_spec.SetField(moduleprogress.FieldStatus, field.TypeString, value)
	}
	if value, ok := mpu.mutation.Score(); ok {
		_spec.SetField(moduleprogress.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := mpu.mutation.AddedScore(); ok {
		_spec.AddField(moduleprogress.FieldScore, field.TypeFloat32, value)
	}
	if mpu.mutation.ScoreCleared() {
		_spec.ClearField(moduleprogress.FieldScore, field.TypeFloat32)
	}
	if value, ok := mpu.mutation.Attempts(); ok {
		_spec.SetField(moduleprogress.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := mpu.mutation.AddedAttempts(); ok {
		_spec.AddField(moduleprogress.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := mpu.mutation.StartedAt(); ok {
		_spec.SetField(moduleprogress.FieldStartedAt, field.TypeTime, value)
	}
	if mpu.mutation.StartedAtCleared() {
		_spec.ClearField(moduleprogress.FieldStartedAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.CompletedAt(); ok {
		_spec.SetField(moduleprogress.FieldCompletedAt, field.TypeTime, value)
	}
	if mpu.mutation.CompletedAtCleared() {
		_spec.ClearField(moduleprogress.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := mpu.mutation.UpdatedAt(); ok {
		_spec.SetField(moduleprogress.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpu.mutation.EnrollmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleprogress.EnrollmentTable,
			Columns: []string{moduleprogress.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.EnrollmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleprogress.EnrollmentTable,
			Columns: []string{moduleprogress.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.ModuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleprogress.ModuleTable,
			Columns: []string{moduleprogress.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleprogress.ModuleTable,
			Columns: []string{moduleprogress.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moduleprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mpu.mutation.done = true
	return n, nil
}

// ModuleProgressUpdateOne is the builder for updating a single ModuleProgress entity.
type ModuleProgressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ModuleProgressMutation
}

// SetEnrollmentID sets the "enrollment_id" field.
func (mpuo *ModuleProgressUpdateOne) SetEnrollmentID(u uuid.UUID) *ModuleProgressUpdateOne {
	mpuo.mutation.SetEnrollmentID(u)
	return mpuo
}

// SetNillableEnrollmentID sets the "enrollment_id" field if the given value is not nil.
func (mpuo *ModuleProgressUpdateOne) SetNillableEnrollmentID(u *uuid.UUID) *ModuleProgressUpdateOne {
	if u != nil {
		mpuo.SetEnrollmentID(*u)
	}
	return mpuo
}

// SetModuleID sets the "module_id" field.
func (mpuo *ModuleProgressUpdateOne) SetModuleID(u uuid.UUID) *ModuleProgressUpdateOne {
	mpuo.mutation.SetModuleID(u)
	return mpuo
}

// SetNillableModuleID sets the "module_id" field if the given value is not nil.
func (mpuo *ModuleProgressUpdateOne) SetNillableModuleID(u *uuid.UUID) *ModuleProgressUpdateOne {
	if u != nil {
		mpuo.SetModuleID(*u)
	}
	return mpuo
}

// SetStatus sets the "status" field.
func (mpuo *ModuleProgressUpdateOne) SetStatus(s string) *ModuleProgressUpdateOne {
	mpuo.mutation.SetStatus(s)
	return mpuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mpuo *ModuleProgressUpdateOne) SetNillableStatus(s *string) *ModuleProgressUpdateOne {
	if s != nil {
		mpuo.SetStatus(*s)
	}
	return mpuo
}

// SetScore sets the "score" field.
func (mpuo *ModuleProgressUpdateOne) SetScore(f float32) *ModuleProgressUpdateOne {
	mpuo.mutation.ResetScore()
	mpuo.mutation.SetScore(f)
	return mpuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (mpuo *ModuleProgressUpdateOne) SetNillableScore(f *float32) *ModuleProgressUpdateOne {
	if f != nil {
		mpuo.SetScore(*f)
	}
	return mpuo
}

// AddScore adds f to the "score" field.
func (mpuo *ModuleProgressUpdateOne) AddScore(f float32) *ModuleProgressUpdateOne {
	mpuo.mutation.AddScore(f)
	return mpuo
}

// ClearScore clears the value of the "score" field.
func (mpuo *ModuleProgressUpdateOne) ClearScore() *ModuleProgressUpdateOne {
	mpuo.mutation.ClearScore()
	return mpuo
}

// SetAttempts sets the "attempts" field.
func (mpuo *ModuleProgressUpdateOne) SetAttempts(i int) *ModuleProgressUpdateOne {
	mpuo.mutation.ResetAttempts()
	mpuo.mutation.SetAttempts(i)
	return mpuo
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (mpuo *ModuleProgressUpdateOne) SetNillableAttempts(i *int) *ModuleProgressUpdateOne {
	if i != nil {
		mpuo.SetAttempts(*i)
	}
	return mpuo
}

// AddAttempts adds i to the "attempts" field.
func (mpuo *ModuleProgressUpdateOne) AddAttempts(i int) *ModuleProgressUpdateOne {
	mpuo.mutation.AddAttempts(i)
	return mpuo
}

// SetStartedAt sets the "started_at" field.
func (mpuo *ModuleProgressUpdateOne) SetStartedAt(t time.Time) *ModuleProgressUpdateOne {
	mpuo.mutation.SetStartedAt(t)
	return mpuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (mpuo *ModuleProgressUpdateOne) SetNillableStartedAt(t *time.Time) *ModuleProgressUpdateOne {
	if t != nil {
		mpuo.SetStartedAt(*t)
	}
	return mpuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (mpuo *ModuleProgressUpdateOne) ClearStartedAt() *ModuleProgressUpdateOne {
	mpuo.mutation.ClearStartedAt()
	return mpuo
}

// SetCompletedAt sets the "completed_at" field.
func (mpuo *ModuleProgressUpdateOne) SetCompletedAt(t time.Time) *ModuleProgressUpdateOne {
	mpuo.mutation.SetCompletedAt(t)
	return mpuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (mpuo *ModuleProgressUpdateOne) SetNillableCompletedAt(t *time.Time) *ModuleProgressUpdateOne {
	if t != nil {
		mpuo.SetCompletedAt(*t)
	}
	return mpuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (mpuo *ModuleProgressUpdateOne) ClearCompletedAt() *ModuleProgressUpdateOne {
	mpuo.mutation.ClearCompletedAt()
	return mpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (mpuo *ModuleProgressUpdateOne) SetUpdatedAt(t time.Time) *ModuleProgressUpdateOne {
	mpuo.mutation.SetUpdatedAt(t)
	return mpuo
}

// SetEnrollment sets the "enrollment" edge to the Enrollment entity.
func (mpuo *ModuleProgressUpdateOne) SetEnrollment(e *Enrollment) *ModuleProgressUpdateOne {
	return mpuo.SetEnrollmentID(e.ID)
}

// SetModule sets the "module" edge to the Module entity.
func (mpuo *ModuleProgressUpdateOne) SetModule(m *Module) *ModuleProgressUpdateOne {
	return mpuo.SetModuleID(m.ID)
}

// Mutation returns the ModuleProgressMutation object of the builder.
func (mpuo *ModuleProgressUpdateOne) Mutation() *ModuleProgressMutation {
	return mpuo.mutation
}

// ClearEnrollment clears the "enrollment" edge to the Enrollment entity.
func (mpuo *ModuleProgressUpdateOne) ClearEnrollment() *ModuleProgressUpdateOne {
	mpuo.mutation.ClearEnrollment()
	return mpuo
}

// ClearModule clears the "module" edge to the Module entity.
func (mpuo *ModuleProgressUpdateOne) ClearModule() *ModuleProgressUpdateOne {
	mpuo.mutation.ClearModule()
	return mpuo
}

// Where appends a list predicates to the ModuleProgressUpdate builder.
func (mpuo *ModuleProgressUpdateOne) Where(ps ...predicate.ModuleProgress) *ModuleProgressUpdateOne {
	mpuo.mutation.Where(ps...)
	return mpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mpuo *ModuleProgressUpdateOne) Select(field string, fields ...string) *ModuleProgressUpdateOne {
	mpuo.fields = append([]string{field}, fields...)
	return mpuo
}

// Save executes the query and returns the updated ModuleProgress entity.
func (mpuo *ModuleProgressUpdateOne) Save(ctx context.Context) (*ModuleProgress, error) {
	mpuo.defaults()
	return withHooks(ctx, mpuo.sqlSave, mpuo.mutation, mpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *ModuleProgressUpdateOne) SaveX(ctx context.Context) *ModuleProgress {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *ModuleProgressUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *ModuleProgressUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpuo *ModuleProgressUpdateOne) defaults() {
	if _, ok := mpuo.mutation.UpdatedAt(); !ok {
		v := moduleprogress.UpdateDefaultUpdatedAt()
		mpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpuo *ModuleProgressUpdateOne) check() error {
	if _, ok := mpuo.mutation.EnrollmentID(); mpuo.mutation.EnrollmentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ModuleProgress.enrollment"`)
	}
	if _, ok := mpuo.mutation.ModuleID(); mpuo.mutation.ModuleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ModuleProgress.module"`)
	}
	return nil
}

func (mpuo *ModuleProgressUpdateOne) sqlSave(ctx context.Context) (_node *ModuleProgress, err error) {
	if err := mpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(moduleprogress.Table, moduleprogress.Columns, sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID))
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ModuleProgress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moduleprogress.FieldID)
		for _, f := range fields {
			if !moduleprogress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != moduleprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpuo.mutation.Status(); ok {
		_spec.SetField(moduleprogress.FieldStatus, field.TypeString, value)
	}
	if value, ok := mpuo.mutation.Score(); ok {
		_spec.SetField(moduleprogress.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := mpuo.mutation.AddedScore(); ok {
		_spec.AddField(moduleprogress.FieldScore, field.TypeFloat32, value)
	}
	if mpuo.mutation.ScoreCleared() {
		_spec.ClearField(moduleprogress.FieldScore, field.TypeFloat32)
	}
	if value, ok := mpuo.mutation.Attempts(); ok {
		_spec.SetField(moduleprogress.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := mpuo.mutation.AddedAttempts(); ok {
		_spec.AddField(moduleprogress.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := mpuo.mutation.StartedAt(); ok {
		_spec.SetField(moduleprogress.FieldStartedAt, field.TypeTime, value)
	}
	if mpuo.mutation.StartedAtCleared() {
		_spec.ClearField(moduleprogress.FieldStartedAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.CompletedAt(); ok {
		_spec.SetField(moduleprogress.FieldCompletedAt, field.TypeTime, value)
	}
	if mpuo.mutation.CompletedAtCleared() {
		_spec.ClearField(moduleprogress.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := mpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(moduleprogress.FieldUpdatedAt, field.TypeTime, value)
	}
	if mpuo.mutation.EnrollmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleprogress.EnrollmentTable,
			Columns: []string{moduleprogress.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.EnrollmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleprogress.EnrollmentTable,
			Columns: []string{moduleprogress.EnrollmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.ModuleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleprogress.ModuleTable,
			Columns: []string{moduleprogress.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.ModuleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   moduleprogress.ModuleTable,
			Columns: []string{moduleprogress.ModuleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(module.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ModuleProgress{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moduleprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mpuo.mutation.done = true
	return _node, nil
}
