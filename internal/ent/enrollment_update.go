// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-go/internal/ent/course"
	"lms-go/internal/ent/enrollment"
	"lms-go/internal/ent/group"
	"lms-go/internal/ent/moduleprogress"
	"lms-go/internal/ent/organization"
	"lms-go/internal/ent/predicate"
	"lms-go/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EnrollmentUpdate is the builder for updating Enrollment entities.
type EnrollmentUpdate struct {
	config
	hooks    []Hook
	mutation *EnrollmentMutation
}

// Where appends a list predicates to the EnrollmentUpdate builder.
func (eu *EnrollmentUpdate) Where(ps ...predicate.Enrollment) *EnrollmentUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetOrganizationID sets the "organization_id" field.
func (eu *EnrollmentUpdate) SetOrganizationID(u uuid.UUID) *EnrollmentUpdate {
	eu.mutation.SetOrganizationID(u)
	return eu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableOrganizationID(u *uuid.UUID) *EnrollmentUpdate {
	if u != nil {
		eu.SetOrganizationID(*u)
	}
	return eu
}

// SetCourseID sets the "course_id" field.
func (eu *EnrollmentUpdate) SetCourseID(u uuid.UUID) *EnrollmentUpdate {
	eu.mutation.SetCourseID(u)
	return eu
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableCourseID(u *uuid.UUID) *EnrollmentUpdate {
	if u != nil {
		eu.SetCourseID(*u)
	}
	return eu
}

// SetUserID sets the "user_id" field.
func (eu *EnrollmentUpdate) SetUserID(u uuid.UUID) *EnrollmentUpdate {
	eu.mutation.SetUserID(u)
	return eu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableUserID(u *uuid.UUID) *EnrollmentUpdate {
	if u != nil {
		eu.SetUserID(*u)
	}
	return eu
}

// SetGroupID sets the "group_id" field.
func (eu *EnrollmentUpdate) SetGroupID(u uuid.UUID) *EnrollmentUpdate {
	eu.mutation.SetGroupID(u)
	return eu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableGroupID(u *uuid.UUID) *EnrollmentUpdate {
	if u != nil {
		eu.SetGroupID(*u)
	}
	return eu
}

// ClearGroupID clears the value of the "group_id" field.
func (eu *EnrollmentUpdate) ClearGroupID() *EnrollmentUpdate {
	eu.mutation.ClearGroupID()
	return eu
}

// SetStatus sets the "status" field.
func (eu *EnrollmentUpdate) SetStatus(s string) *EnrollmentUpdate {
	eu.mutation.SetStatus(s)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableStatus(s *string) *EnrollmentUpdate {
	if s != nil {
		eu.SetStatus(*s)
	}
	return eu
}

// SetProgress sets the "progress" field.
func (eu *EnrollmentUpdate) SetProgress(f float32) *EnrollmentUpdate {
	eu.mutation.ResetProgress()
	eu.mutation.SetProgress(f)
	return eu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableProgress(f *float32) *EnrollmentUpdate {
	if f != nil {
		eu.SetProgress(*f)
	}
	return eu
}

// AddProgress adds f to the "progress" field.
func (eu *EnrollmentUpdate) AddProgress(f float32) *EnrollmentUpdate {
	eu.mutation.AddProgress(f)
	return eu
}

// SetStartedAt sets the "started_at" field.
func (eu *EnrollmentUpdate) SetStartedAt(t time.Time) *EnrollmentUpdate {
	eu.mutation.SetStartedAt(t)
	return eu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableStartedAt(t *time.Time) *EnrollmentUpdate {
	if t != nil {
		eu.SetStartedAt(*t)
	}
	return eu
}

// ClearStartedAt clears the value of the "started_at" field.
func (eu *EnrollmentUpdate) ClearStartedAt() *EnrollmentUpdate {
	eu.mutation.ClearStartedAt()
	return eu
}

// SetCompletedAt sets the "completed_at" field.
func (eu *EnrollmentUpdate) SetCompletedAt(t time.Time) *EnrollmentUpdate {
	eu.mutation.SetCompletedAt(t)
	return eu
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (eu *EnrollmentUpdate) SetNillableCompletedAt(t *time.Time) *EnrollmentUpdate {
	if t != nil {
		eu.SetCompletedAt(*t)
	}
	return eu
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (eu *EnrollmentUpdate) ClearCompletedAt() *EnrollmentUpdate {
	eu.mutation.ClearCompletedAt()
	return eu
}

// SetMetadata sets the "metadata" field.
func (eu *EnrollmentUpdate) SetMetadata(m map[string]interface{}) *EnrollmentUpdate {
	eu.mutation.SetMetadata(m)
	return eu
}

// ClearMetadata clears the value of the "metadata" field.
func (eu *EnrollmentUpdate) ClearMetadata() *EnrollmentUpdate {
	eu.mutation.ClearMetadata()
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EnrollmentUpdate) SetUpdatedAt(t time.Time) *EnrollmentUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (eu *EnrollmentUpdate) SetOrganization(o *Organization) *EnrollmentUpdate {
	return eu.SetOrganizationID(o.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (eu *EnrollmentUpdate) SetCourse(c *Course) *EnrollmentUpdate {
	return eu.SetCourseID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (eu *EnrollmentUpdate) SetUser(u *User) *EnrollmentUpdate {
	return eu.SetUserID(u.ID)
}

// SetGroup sets the "group" edge to the Group entity.
func (eu *EnrollmentUpdate) SetGroup(g *Group) *EnrollmentUpdate {
	return eu.SetGroupID(g.ID)
}

// AddProgressEntryIDs adds the "progress_entries" edge to the ModuleProgress entity by IDs.
func (eu *EnrollmentUpdate) AddProgressEntryIDs(ids ...uuid.UUID) *EnrollmentUpdate {
	eu.mutation.AddProgressEntryIDs(ids...)
	return eu
}

// AddProgressEntries adds the "progress_entries" edges to the ModuleProgress entity.
func (eu *EnrollmentUpdate) AddProgressEntries(m ...*ModuleProgress) *EnrollmentUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return eu.AddProgressEntryIDs(ids...)
}

// Mutation returns the EnrollmentMutation object of the builder.
func (eu *EnrollmentUpdate) Mutation() *EnrollmentMutation {
	return eu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (eu *EnrollmentUpdate) ClearOrganization() *EnrollmentUpdate {
	eu.mutation.ClearOrganization()
	return eu
}

// ClearCourse clears the "course" edge to the Course entity.
func (eu *EnrollmentUpdate) ClearCourse() *EnrollmentUpdate {
	eu.mutation.ClearCourse()
	return eu
}

// ClearUser clears the "user" edge to the User entity.
func (eu *EnrollmentUpdate) ClearUser() *EnrollmentUpdate {
	eu.mutation.ClearUser()
	return eu
}

// ClearGroup clears the "group" edge to the Group entity.
func (eu *EnrollmentUpdate) ClearGroup() *EnrollmentUpdate {
	eu.mutation.ClearGroup()
	return eu
}

// ClearProgressEntries clears all "progress_entries" edges to the ModuleProgress entity.
func (eu *EnrollmentUpdate) ClearProgressEntries() *EnrollmentUpdate {
	eu.mutation.ClearProgressEntries()
	return eu
}

// RemoveProgressEntryIDs removes the "progress_entries" edge to ModuleProgress entities by IDs.
func (eu *EnrollmentUpdate) RemoveProgressEntryIDs(ids ...uuid.UUID) *EnrollmentUpdate {
	eu.mutation.RemoveProgressEntryIDs(ids...)
	return eu
}

// RemoveProgressEntries removes "progress_entries" edges to ModuleProgress entities.
func (eu *EnrollmentUpdate) RemoveProgressEntries(m ...*ModuleProgress) *EnrollmentUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return eu.RemoveProgressEntryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EnrollmentUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EnrollmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EnrollmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EnrollmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EnrollmentUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := enrollment.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EnrollmentUpdate) check() error {
	if _, ok := eu.mutation.OrganizationID(); eu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Enrollment.organization"`)
	}
	if _, ok := eu.mutation.CourseID(); eu.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Enrollment.course"`)
	}
	if _, ok := eu.mutation.UserID(); eu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Enrollment.user"`)
	}
	return nil
}

func (eu *EnrollmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(enrollment.Table, enrollment.Columns, sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(enrollment.FieldStatus, field.TypeString, value)
	}
	if value, ok := eu.mutation.Progress(); ok {
		_spec.SetField(enrollment.FieldProgress, field.TypeFloat32, value)
	}
	if value, ok := eu.mutation.AddedProgress(); ok {
		_spec.AddField(enrollment.FieldProgress, field.TypeFloat32, value)
	}
	if value, ok := eu.mutation.StartedAt(); ok {
		_spec.SetField(enrollment.FieldStartedAt, field.TypeTime, value)
	}
	if eu.mutation.StartedAtCleared() {
		_spec.ClearField(enrollment.FieldStartedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.CompletedAt(); ok {
		_spec.SetField(enrollment.FieldCompletedAt, field.TypeTime, value)
	}
	if eu.mutation.CompletedAtCleared() {
		_spec.ClearField(enrollment.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.Metadata(); ok {
		_spec.SetField(enrollment.FieldMetadata, field.TypeJSON, value)
	}
	if eu.mutation.MetadataCleared() {
		_spec.ClearField(enrollment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(enrollment.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.OrganizationTable,
			Columns: []string{enrollment.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.OrganizationTable,
			Columns: []string{enrollment.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.CourseTable,
			Columns: []string{enrollment.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.CourseTable,
			Columns: []string{enrollment.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.UserTable,
			Columns: []string{enrollment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.UserTable,
			Columns: []string{enrollment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.GroupTable,
			Columns: []string{enrollment.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.GroupTable,
			Columns: []string{enrollment.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ProgressEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.ProgressEntriesTable,
			Columns: []string{enrollment.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedProgressEntriesIDs(); len(nodes) > 0 && !eu.mutation.ProgressEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.ProgressEntriesTable,
			Columns: []string{enrollment.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ProgressEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.ProgressEntriesTable,
			Columns: []string{enrollment.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enrollment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EnrollmentUpdateOne is the builder for updating a single Enrollment entity.
type EnrollmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnrollmentMutation
}

// SetOrganizationID sets the "organization_id" field.
func (euo *EnrollmentUpdateOne) SetOrganizationID(u uuid.UUID) *EnrollmentUpdateOne {
	euo.mutation.SetOrganizationID(u)
	return euo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableOrganizationID(u *uuid.UUID) *EnrollmentUpdateOne {
	if u != nil {
		euo.SetOrganizationID(*u)
	}
	return euo
}

// SetCourseID sets the "course_id" field.
func (euo *EnrollmentUpdateOne) SetCourseID(u uuid.UUID) *EnrollmentUpdateOne {
	euo.mutation.SetCourseID(u)
	return euo
}

// SetNillableCourseID sets the "course_id" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableCourseID(u *uuid.UUID) *EnrollmentUpdateOne {
	if u != nil {
		euo.SetCourseID(*u)
	}
	return euo
}

// SetUserID sets the "user_id" field.
func (euo *EnrollmentUpdateOne) SetUserID(u uuid.UUID) *EnrollmentUpdateOne {
	euo.mutation.SetUserID(u)
	return euo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableUserID(u *uuid.UUID) *EnrollmentUpdateOne {
	if u != nil {
		euo.SetUserID(*u)
	}
	return euo
}

// SetGroupID sets the "group_id" field.
func (euo *EnrollmentUpdateOne) SetGroupID(u uuid.UUID) *EnrollmentUpdateOne {
	euo.mutation.SetGroupID(u)
	return euo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableGroupID(u *uuid.UUID) *EnrollmentUpdateOne {
	if u != nil {
		euo.SetGroupID(*u)
	}
	return euo
}

// ClearGroupID clears the value of the "group_id" field.
func (euo *EnrollmentUpdateOne) ClearGroupID() *EnrollmentUpdateOne {
	euo.mutation.ClearGroupID()
	return euo
}

// SetStatus sets the "status" field.
func (euo *EnrollmentUpdateOne) SetStatus(s string) *EnrollmentUpdateOne {
	euo.mutation.SetStatus(s)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableStatus(s *string) *EnrollmentUpdateOne {
	if s != nil {
		euo.SetStatus(*s)
	}
	return euo
}

// SetProgress sets the "progress" field.
func (euo *EnrollmentUpdateOne) SetProgress(f float32) *EnrollmentUpdateOne {
	euo.mutation.ResetProgress()
	euo.mutation.SetProgress(f)
	return euo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableProgress(f *float32) *EnrollmentUpdateOne {
	if f != nil {
		euo.SetProgress(*f)
	}
	return euo
}

// AddProgress adds f to the "progress" field.
func (euo *EnrollmentUpdateOne) AddProgress(f float32) *EnrollmentUpdateOne {
	euo.mutation.AddProgress(f)
	return euo
}

// SetStartedAt sets the "started_at" field.
func (euo *EnrollmentUpdateOne) SetStartedAt(t time.Time) *EnrollmentUpdateOne {
	euo.mutation.SetStartedAt(t)
	return euo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableStartedAt(t *time.Time) *EnrollmentUpdateOne {
	if t != nil {
		euo.SetStartedAt(*t)
	}
	return euo
}

// ClearStartedAt clears the value of the "started_at" field.
func (euo *EnrollmentUpdateOne) ClearStartedAt() *EnrollmentUpdateOne {
	euo.mutation.ClearStartedAt()
	return euo
}

// SetCompletedAt sets the "completed_at" field.
func (euo *EnrollmentUpdateOne) SetCompletedAt(t time.Time) *EnrollmentUpdateOne {
	euo.mutation.SetCompletedAt(t)
	return euo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (euo *EnrollmentUpdateOne) SetNillableCompletedAt(t *time.Time) *EnrollmentUpdateOne {
	if t != nil {
		euo.SetCompletedAt(*t)
	}
	return euo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (euo *EnrollmentUpdateOne) ClearCompletedAt() *EnrollmentUpdateOne {
	euo.mutation.ClearCompletedAt()
	return euo
}

// SetMetadata sets the "metadata" field.
func (euo *EnrollmentUpdateOne) SetMetadata(m map[string]interface{}) *EnrollmentUpdateOne {
	euo.mutation.SetMetadata(m)
	return euo
}

// ClearMetadata clears the value of the "metadata" field.
func (euo *EnrollmentUpdateOne) ClearMetadata() *EnrollmentUpdateOne {
	euo.mutation.ClearMetadata()
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EnrollmentUpdateOne) SetUpdatedAt(t time.Time) *EnrollmentUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (euo *EnrollmentUpdateOne) SetOrganization(o *Organization) *EnrollmentUpdateOne {
	return euo.SetOrganizationID(o.ID)
}

// SetCourse sets the "course" edge to the Course entity.
func (euo *EnrollmentUpdateOne) SetCourse(c *Course) *EnrollmentUpdateOne {
	return euo.SetCourseID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (euo *EnrollmentUpdateOne) SetUser(u *User) *EnrollmentUpdateOne {
	return euo.SetUserID(u.ID)
}

// SetGroup sets the "group" edge to the Group entity.
func (euo *EnrollmentUpdateOne) SetGroup(g *Group) *EnrollmentUpdateOne {
	return euo.SetGroupID(g.ID)
}

// AddProgressEntryIDs adds the "progress_entries" edge to the ModuleProgress entity by IDs.
func (euo *EnrollmentUpdateOne) AddProgressEntryIDs(ids ...uuid.UUID) *EnrollmentUpdateOne {
	euo.mutation.AddProgressEntryIDs(ids...)
	return euo
}

// AddProgressEntries adds the "progress_entries" edges to the ModuleProgress entity.
func (euo *EnrollmentUpdateOne) AddProgressEntries(m ...*ModuleProgress) *EnrollmentUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return euo.AddProgressEntryIDs(ids...)
}

// Mutation returns the EnrollmentMutation object of the builder.
func (euo *EnrollmentUpdateOne) Mutation() *EnrollmentMutation {
	return euo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (euo *EnrollmentUpdateOne) ClearOrganization() *EnrollmentUpdateOne {
	euo.mutation.ClearOrganization()
	return euo
}

// ClearCourse clears the "course" edge to the Course entity.
func (euo *EnrollmentUpdateOne) ClearCourse() *EnrollmentUpdateOne {
	euo.mutation.ClearCourse()
	return euo
}

// ClearUser clears the "user" edge to the User entity.
func (euo *EnrollmentUpdateOne) ClearUser() *EnrollmentUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// ClearGroup clears the "group" edge to the Group entity.
func (euo *EnrollmentUpdateOne) ClearGroup() *EnrollmentUpdateOne {
	euo.mutation.ClearGroup()
	return euo
}

// ClearProgressEntries clears all "progress_entries" edges to the ModuleProgress entity.
func (euo *EnrollmentUpdateOne) ClearProgressEntries() *EnrollmentUpdateOne {
	euo.mutation.ClearProgressEntries()
	return euo
}

// RemoveProgressEntryIDs removes the "progress_entries" edge to ModuleProgress entities by IDs.
func (euo *EnrollmentUpdateOne) RemoveProgressEntryIDs(ids ...uuid.UUID) *EnrollmentUpdateOne {
	euo.mutation.RemoveProgressEntryIDs(ids...)
	return euo
}

// RemoveProgressEntries removes "progress_entries" edges to ModuleProgress entities.
func (euo *EnrollmentUpdateOne) RemoveProgressEntries(m ...*ModuleProgress) *EnrollmentUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return euo.RemoveProgressEntryIDs(ids...)
}

// Where appends a list predicates to the EnrollmentUpdate builder.
func (euo *EnrollmentUpdateOne) Where(ps ...predicate.Enrollment) *EnrollmentUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EnrollmentUpdateOne) Select(field string, fields ...string) *EnrollmentUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Enrollment entity.
func (euo *EnrollmentUpdateOne) Save(ctx context.Context) (*Enrollment, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EnrollmentUpdateOne) SaveX(ctx context.Context) *Enrollment {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EnrollmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EnrollmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EnrollmentUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := enrollment.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EnrollmentUpdateOne) check() error {
	if _, ok := euo.mutation.OrganizationID(); euo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Enrollment.organization"`)
	}
	if _, ok := euo.mutation.CourseID(); euo.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Enrollment.course"`)
	}
	if _, ok := euo.mutation.UserID(); euo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Enrollment.user"`)
	}
	return nil
}

func (euo *EnrollmentUpdateOne) sqlSave(ctx context.Context) (_node *Enrollment, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(enrollment.Table, enrollment.Columns, sqlgraph.NewFieldSpec(enrollment.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Enrollment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enrollment.FieldID)
		for _, f := range fields {
			if !enrollment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enrollment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(enrollment.FieldStatus, field.TypeString, value)
	}
	if value, ok := euo.mutation.Progress(); ok {
		_spec.SetField(enrollment.FieldProgress, field.TypeFloat32, value)
	}
	if value, ok := euo.mutation.AddedProgress(); ok {
		_spec.AddField(enrollment.FieldProgress, field.TypeFloat32, value)
	}
	if value, ok := euo.mutation.StartedAt(); ok {
		_spec.SetField(enrollment.FieldStartedAt, field.TypeTime, value)
	}
	if euo.mutation.StartedAtCleared() {
		_spec.ClearField(enrollment.FieldStartedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.CompletedAt(); ok {
		_spec.SetField(enrollment.FieldCompletedAt, field.TypeTime, value)
	}
	if euo.mutation.CompletedAtCleared() {
		_spec.ClearField(enrollment.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.Metadata(); ok {
		_spec.SetField(enrollment.FieldMetadata, field.TypeJSON, value)
	}
	if euo.mutation.MetadataCleared() {
		_spec.ClearField(enrollment.FieldMetadata, field.TypeJSON)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(enrollment.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.OrganizationTable,
			Columns: []string{enrollment.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.OrganizationTable,
			Columns: []string{enrollment.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.CourseTable,
			Columns: []string{enrollment.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.CourseTable,
			Columns: []string{enrollment.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.UserTable,
			Columns: []string{enrollment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.UserTable,
			Columns: []string{enrollment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.GroupTable,
			Columns: []string{enrollment.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enrollment.GroupTable,
			Columns: []string{enrollment.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ProgressEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.ProgressEntriesTable,
			Columns: []string{enrollment.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedProgressEntriesIDs(); len(nodes) > 0 && !euo.mutation.ProgressEntriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.ProgressEntriesTable,
			Columns: []string{enrollment.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ProgressEntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enrollment.ProgressEntriesTable,
			Columns: []string{enrollment.ProgressEntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(moduleprogress.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Enrollment{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enrollment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
